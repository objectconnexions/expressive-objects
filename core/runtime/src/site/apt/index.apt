~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.

Runtime
 
 The <runtime> module is the "engine-room" of the framework, taking 
 responsibility to manage domain object (pojo) instances at runtime.

 Each pojo is wrapped in an <<<ObjectAdapter>>> (cf <<<java.lang.Object>>>) 
 from which the <<<ObjectSpecification>>> (cf <<<java.lang.Class>>>) can be 
 obtained.  Associated with each <<<ObjectAdapter>>> is an <<<Oid>>>: an
 opaque serializable identifier to the object.  The <runtime> module maintains 
 a 3-way {{{http://martinfowler.com/eaaCatalog/identityMap.html}identity map}} 
 between these, allowing forward and reverse lookups. 
 
 The <runtime> module defines a number of APIs the most important of which is 
 the <<<ObjectStore>>> API.  The <runtime> module manages persistence 
 and transaction demarcation, with the actual storage of objects being 
 delegated to an object store implementation.

 The other major API defined by the <runtime> module security API, dealing with
 authentication and authorization.  
 
 In addition to all the above, the <runtime> module defines a command-line 
 bootstrapper, making it easy to bootstrap <Expressive Objects> from a main() or a 
 JUnit test case.


WebApp Support
 
 The <webapp> module is a small module that provides reusable servlet context 
 listeners and filters to webapp viewers.  They include:
 
 * <<<ExpressiveObjectsWebAppBootstrapper>>> which is a servlet context listener to bootstrap
   an Expressive Objects runtime and bind to the servlet context

 * <<<ExpressiveObjectsSessionFilter>>> which is a filter used to
   creating an <<<ExpressiveObjectsSession>>> for each request (the 
   {{{http://community.jboss.org/wiki/OpenSessioninView}Open session in View}}
    pattern)

 []
 
 Not every webapp-based viewer is required to use these classes; refer to their
 documentation for exact details of what should reside in the <<<web.xml>>>.
 


Identity Bytecode
 
 The <identity> bytecode module is a no-op implementation of the bytecode
 APIs.  It is provided for those object stores that do not need the use of 
 bytecode enhancement, typically because they hook into the lazy loading 
 of the underlying ORM.


Documentation

 See the {{{../index.html}core}} documentation 
 ({{{../../../core/docbkx/html/guide/expressive-objects-core.html}HTML}} or 
  {{{../../../core/docbkx/pdf/expressive-objects-core.pdf}PDF}}).

