#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#  
#         http://www.apache.org/licenses/LICENSE-2.0
#         
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.


# these are the services/repositories that are instantiated by the
# framework.  These are automatically injected into any domain object
# that declares a dependency.  Those that are not hidden are also
# shown in the user interface.
expressive-objects.services.prefix = uk.co.objectconnexions.expressiveobjects.example.application.onlinedemo
expressive-objects.services = dom.items.ToDoItems,\
                dom.items.Categories,\
                fixture.items.DemoFixturesDefault


# the online demo does not use the framework to setup fixtures;
# instead users can install their own fixtures 
expressive-objects.fixtures.prefix= uk.co.objectconnexions.expressiveobjects.example.application.onlinedemo
//expressive-objects.fixtures= fixture.LogonAsSvenFixture,fixture.items.ToDoItemsFixture



# the authentication mechanism is configurable.  the onlinedemo uses its own implementation,
# which uses an in-memory list of registered users.
expressive-objects.authentication=uk.co.objectconnexions.expressiveobjects.example.application.onlinedemo.auth.AuthenticationManagerSupportingInMemoryRegistrationInstaller


# the framework supports authorization; the usual implementation maps roles to permissions.
# this is switched off for the onlinedemo, however
#expressive-objects.reflector.facets.include=uk.co.objectconnexions.expressiveobjects.runtimes.dflt.runtime.authorization.standard.AuthorizationFacetFactoryImpl


# the default authorization mechanism can be put into "learn" mode, so that it allows all
# requests through, and writes out the permission entries that were checked.
#expressive-objects.authorization.learn=true


# configure the profile store.  this facility is not supported by the viewers used in
# the onlinedemo, so is included here for completeness only
expressive-objects.user-profile-store=in-memory


# configure the object store.  using the inmemory objectstore means that all data will
# be lost when the app is restarted.   it is commonly used for prototyping and testing 
expressive-objects.persistor=in-memory
