#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}  Licensed to the Apache Software Foundation (ASF) under one
${symbol_pound}  or more contributor license agreements.  See the NOTICE file
${symbol_pound}  distributed with this work for additional information
${symbol_pound}  regarding copyright ownership.  The ASF licenses this file
${symbol_pound}  to you under the Apache License, Version 2.0 (the
${symbol_pound}  "License"); you may not use this file except in compliance
${symbol_pound}  with the License.  You may obtain a copy of the License at
${symbol_pound}  
${symbol_pound}         http://www.apache.org/licenses/LICENSE-2.0
${symbol_pound}         
${symbol_pound}  Unless required by applicable law or agreed to in writing,
${symbol_pound}  software distributed under the License is distributed on an
${symbol_pound}  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
${symbol_pound}  KIND, either express or implied.  See the License for the
${symbol_pound}  specific language governing permissions and limitations
${symbol_pound}  under the License.


${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} specify system components.
${symbol_pound}
${symbol_pound} The values correspond to the named components in the installer-registry.properties file
${symbol_pound} in the uk.co.objectconnexions.expressiveobjects.runtimes.dflt:runtime JAR (in the uk.co.objectconnexions.expressiveobjects.runtimes.dflt.runtime package)
${symbol_pound}
${symbol_pound} Although all configuration could reside in expressive-objects.properties, the recommendation is
${symbol_pound} to split out into component specific files:
${symbol_pound} 
${symbol_pound}    xxx_yyy.properties files
${symbol_pound}
${symbol_pound} where
${symbol_pound}    * xxx is the component type, and
${symbol_pound}    * yyy is the component name.
${symbol_pound}
${symbol_pound} For example, persistor_sql.properties holds configuration information specific to the
${symbol_pound}
${symbol_pound}
${symbol_pound} If the components are changed, also remember to edit pom.xml (further comments can be 
${symbol_pound} found in the persistor_xxx.properties files)
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound}
${symbol_pound} configure the persistor (object store) to use
${symbol_pound}
${symbol_pound} * in-memory   requires no additional configuration, but stores object in-memory.
${symbol_pound}               Only suitable for prototyping
${symbol_pound} * datanucleus uses JDO DataNucleus to persist objects to relational database.
${symbol_pound}               for objectstore-specific properties, see persistor_datanucleus.properties   
${symbol_pound} * fileserver  uses a simple FileServer to persist objects as JSON documents.  It requires the fileserver component to be running
${symbol_pound}               for objectstore-specific properties, see persistor_fileserver.properties 
${symbol_pound} * mongodb     uses MongoDB to be persist objects as JSON documents.  It requires MongoDB to be installed and running
${symbol_pound}               for objectstore-specific properties, see persistor_fileserver.properties  
${symbol_pound} * sql         uses an RDBMS to persist objects as table rows.  
${symbol_pound}               for objectstore-specific properties, see persistor_sql.properties
${symbol_pound} * xml         uses the XML ObjectStore to be persist objects to a set of XML files.  Only suitable for prototyping.
${symbol_pound}               for objectstore-specific properties, see persistor_xml.properties 
${symbol_pound}
${symbol_pound} NOTE:
${symbol_pound} * if using non-naive implementations of services, edit expressive-objects.services (below) and 
${symbol_pound} * if necessary, update the pom.xml to reference appropriate objstore-xxx module
${symbol_pound} * for sql and datanucleus objectstores, update the pom.xml to reference appropriate JDBC driver
${symbol_pound} 

expressive-objects.persistor=datanucleus


${symbol_pound}
${symbol_pound} configure authentication mechanism to use (to logon to the system)
${symbol_pound} note:
${symbol_pound} - authentication is disabled if running in exploration mode
${symbol_pound} - the Scimpi viewer allows access to anonymous users
${symbol_pound}
 
${symbol_pound} default is file in SERVER mode, none in SERVER_EXPLORATION.  Configure in web.xml 
expressive-objects.authentication=file


${symbol_pound}
${symbol_pound} configure authorization mechanism to use
${symbol_pound}
${symbol_pound} The authorization mechanism define each users' permissions to view/edit object properties 
${symbol_pound} or collections, and to view/invoke object actions
${symbol_pound}
${symbol_pound} configuring this component automatically refines the metamodel (installing a facet factory
${symbol_pound} which vetoes access as required)
${symbol_pound}

${symbol_pound} default is file in SERVER mode, none in SERVER_EXPLORATION.  Configure in web.xml 
${symbol_pound}expressive-objects.authorization=file



${symbol_pound}
${symbol_pound} configure the user profile store to use.
${symbol_pound} 
${symbol_pound} the user profile store is supported by some viewers as a way to store 
${symbol_pound} user-specific settings (eg colours, themes etc)
${symbol_pound} 
expressive-objects.user-profile-store=in-memory




${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} MetaModel
${symbol_pound}
${symbol_pound} The metamodel typically does not require additional configuration, although
${symbol_pound} the system components (defined above) may refine the metamodel for their needs.
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}


${symbol_pound}
${symbol_pound} additional programming model facets
${symbol_pound}

${symbol_pound}expressive-objects.reflector.facets.include=
${symbol_pound}expressive-objects.reflector.facets.exclude=


${symbol_pound}
${symbol_pound} metamodel validator
${symbol_pound}

${symbol_pound}expressive-objects.reflector.validator=



${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
${symbol_pound}
${symbol_pound} Application Services and fixtures
${symbol_pound}
${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound}
${symbol_pound} Specify the domain services.
${symbol_pound} 
${symbol_pound} These are the most important configuration properties in the system, as they define
${symbol_pound} the set of the classes for Expressive Objects to instantiate as domain service singletons.
${symbol_pound} From these domain service instances the rest of the metamodel is discovered, while the 
${symbol_pound} end-user gains access to other domain objects by invoking the actions of the domain services.
${symbol_pound}
${symbol_pound} The implementations depend on the configured (see expressive-objects.persistor above) 
${symbol_pound}


${symbol_pound} if using the in-memory, XML, SQL, fileserver or mongo object stores:
${symbol_pound}expressive-objects.services.prefix = dom
${symbol_pound}expressive-objects.services = todo.ToDoItems


${symbol_pound} if using the DataNucleus object store
${symbol_pound} (with support for DN's audit service, and to install fixtures using a domain service)
${symbol_pound}expressive-objects.services.prefix = 
expressive-objects.services = objstore.jdo.todo.ToDoItemsJdo,${symbol_escape}
                fixture.todo.ToDoItemsFixturesService,${symbol_escape}
                dom.audit.AuditServiceDemo




${symbol_pound}
${symbol_pound} Specify the (optional) test fixtures
${symbol_pound}
${symbol_pound} Fixtures are used to seed the object store with an initial set of data.  For the 
${symbol_pound} in-memory object store, the fixtures are installed on every run.  For other
${symbol_pound} object stores, they are used only when the object store is first initialized.
${symbol_pound}
expressive-objects.fixtures.prefix= fixture
expressive-objects.fixtures= todo.ToDoItemsFixture

