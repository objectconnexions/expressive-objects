<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title><?eval ${docbkxGuideTitle}?></title>

    <subtitle><?eval ${docbkxGuideSubTitle}?></subtitle>

    <releaseinfo><?eval ${project.version}?></releaseinfo>

    <authorgroup>
      <author>
        <firstname>Dan</firstname>

        <surname>Haywood</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Permission is granted to make and distribute verbatim copies of
      this manual provided that the copyright notice and this permission
      notice are preserved on all copies.</para>
    </legalnotice>
  </bookinfo>

  <!-- front matter -->

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para><emphasis>Expressive Objects</emphasis> is designed to allow programmers
    rapidly develop domain-driven applications following the <ulink
    url="http://en.wikipedia.org/wiki/Naked_Objects">Naked Objects</ulink>
    pattern. It is made up of a core framework plus a number of alternate
    implementations, and supports various viewers and object stores.
    <emphasis>Expressive Objects</emphasis> is hosted at the <ulink
    url="http://incubator.apache.org/expressive-objects">Apache Foundation</ulink>, and is
    licensed under <ulink
    url="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software
    License v2</ulink>.</para>

    <para>If all you are interested in is just using
    <emphasis>ExpressiveObjects</emphasis>, then please refer to <ulink
    url="http://incubator.apache.org/expressive-objects/where-to-start.html">where to start?
    page</ulink> on the Expressive Objects site. This will explain how to get going using a
    Maven archetype.</para>

    <para>This guide though, is for those who want to go a little deeper. It
    breaks into three parts:</para>

    <itemizedlist>
      <listitem>
        <para>the first part is for those just wanting to build either
        <emphasis>Expressive Objects</emphasis> or its site+documentation from
        source, without necessarily contributing any changes back to the
        projects;</para>
      </listitem>

      <listitem>
        <para>the second part is for those who are intending to contribute
        changes back. It deals with such matters as setting up the standard
        development environment, writing documentation and site documentation;
        and releasing <emphasis>ExpressiveObjects</emphasis>.</para>
      </listitem>

      <listitem>
        <para>the third part covers the release process, and is for those
        contributors who want to be able to make Expressive Objects releases (snapshot or
        formal Apache releases)</para>
      </listitem>
    </itemizedlist>

    <para>Note that some of this material also appears, in different form, on
    the <emphasis>Expressive Objects</emphasis> wiki:</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/EXPRESSIVE_OBJECTS/SettingUpDevelopmentEnvironment">setting
        up the development environment</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/EXPRESSIVE_OBJECTS/BuildProcess">build
        process</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="https://cwiki.apache.org/confluence/display/EXPRESSIVE_OBJECTS/SmokeTest">smoke
        test</ulink></para>
      </listitem>
    </itemizedlist>

    <para>The intent is for this guide to be definitive, but you may find that
    the wiki may have slightly more up-to-date (or indeed less-out-of-date)
    information. At any rate, it's worth checking the wiki out too...</para>
  </preface>

  <!-- main content -->

  <part id="prt.Building">
    <title>Building</title>

    <partintro>
      <para>This part of the contributors guide describes how to build
      <emphasis>Expressive Objects</emphasis> from source, for example, just to get a
      better understanding of how the project works, or because your
      organization requires any open source projects to be re-built
      in-house.</para>

      <para>This part of the guide also covers how to build
      <emphasis>ExpressiveObjects</emphasis>' site and documentation (along with
      prerequisite software that needs to be installed prior to doing
      this).</para>

      <para>If you are looking to contribute to <emphasis>Apache
      ExpressiveObjects</emphasis> itself, the information in this part of the guide does
      still apply, but see also <xref linkend="prt.Contributing" /> for much
      more information.</para>
    </partintro>

    <chapter id="chp.PrerequisiteSoftware">
      <title>Prerequisite Software</title>

      <abstract>
        <para>The software needed to build <emphasis>Apache
        ExpressiveObjects</emphasis>.</para>
      </abstract>

      <para>This chapter describes the prerequisite software needed to build
      <emphasis>Expressive Objects</emphasis> modules, and its site and
      documentation.</para>

      <sect1>
        <title>Command Line Software</title>

        <para>Install the following software (you may well already have these
        installed):</para>

        <itemizedlist>
          <listitem>
            <para>a <ulink
            url="http://subversion.tigris.org">Subversion</ulink> <ulink
            url="http://subversion.tigris.org/">client</ulink> (the
            <filename>svn</filename> executable)</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
            6</ulink></para>

            <para>and setup the <varname>JAVA_HOME</varname> environment
            variable;</para>
          </listitem>

          <listitem>
            <para><ulink url="http://maven.apache.org">Maven</ulink> either
            v2.2.1 or 3.0.x</para>

            <para>and setup the <varname>MAVEN_HOME</varname> environment
            variable.</para>

            <para>Highly recommended is to also setup the
            <classname>MAVEN_OPTS</classname> environment variable, to:</para>

            <programlisting>-Xms512m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m</programlisting>

            <para><note>
                <para>Although building <emphasis>ExpressiveObjects</emphasis> with both
                Maven 2 and Maven 3 is supported, the site documentation may
                only be built using Maven 3.</para>
              </note></para>
          </listitem>
        </itemizedlist>

        <para>Finally, add Subversion's <filename>svn</filename> executable
        and Maven's <filename>mvn</filename> executable to your
        <varname>PATH</varname> environment variable.</para>
      </sect1>

      <sect1 id="sec.SettingUpIde">
        <title>IDE</title>

        <para><emphasis>Expressive Objects</emphasis> is built using Maven, so it
        isn't strictly necessary to use an IDE. However, we do strongly
        recommend it.</para>

        <para>All of the main IDEs provide Maven support, NetBeans, IntelliJ
        "natively" and Eclipse (3.7 and later). This guide is written to
        target Eclipse 3.7, which uses m2e (a new version of the m2eclipse
        plugin, and now one of the Eclipse projects).</para>

        <para>Install each of these from their respective update sites.</para>

        <sect2>
          <title>Setting up Eclipse IDE</title>

          <sect3>
            <title>Base Install</title>

            <para>As a minimum, Eclipse requires the Subversion and Maven
            support. These should be installed next.</para>

            <para>We recommend that you use <ulink
            url="http://eclipse.org">Eclipse</ulink> 3.7, because this is
            bundled with m2e to provide Maven support. If you choose to use a
            distribution that doesn't include the Maven support, then you can
            use Help&gt;Install New Software to install the m2e
            features.</para>

            <para>For Subversion support we recommend you use the <ulink
            url="http://subclipse.tigris.org">subclipse</ulink> plugin, which
            can be installed from its <ulink
            url="http://subclipse.tigris.org/update_1.6.x">update
            site</ulink>.</para>
          </sect3>

          <sect3>
            <title>Other Plugins</title>

            <para>There are many other plugins that you can install with
            Eclipse. You might want to check out:</para>

            <itemizedlist>
              <listitem>
                <para><ulink
                url="http://sourceforge.net/projects/pluginbox/">EasyShell</ulink>,
                to provide easy integration with the operating system shell
                and command line.</para>
              </listitem>

              <listitem>
                <para><ulink
                url="http://infinitest.github.com">Infinitest</ulink>, to
                provide continuous testing support</para>
              </listitem>

              <listitem>
                <para><ulink
                url="http://www.soyatec.com/euml2/">Soyatec</ulink>, for a
                free (or commercial) <acronym>UML</acronym>/code live
                synchronization (a la the venerable <ulink
                url="http://www.borland.com/us/products/together/index.html">TogetherJ</ulink>).</para>

                <para>To install the free edition, it is necessary to install
                the <acronym>GMF</acronym> at the same time (see this <ulink
                url="http://www.soyatec.com/forum/viewtopic.php?t=898&amp;sid=1a1388b502a12114e6b8f28d7bbdee2a">forum
                posting</ulink>).</para>
              </listitem>
            </itemizedlist>

            <para>The following diagram shows the context menu that
            <emphasis>EasyShell</emphasis> adds within package
            explorer:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-integration.png"
                           scale="50" />
              </imageobject>
            </mediaobject>

            <para>Key bindings for the <emphasis>EasyShell</emphasis> commands
            can be set up using Windows &gt; Preferences &gt; General &gt;
            Keys:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/easyshell-keys.png"
                           scale="45" />
              </imageobject>
            </mediaobject>

            <para></para>

            <para>In addition, if you are also a contributor to
            <emphasis>ExpressiveObjects</emphasis>, then there are some additional plugins
            (FindBugs, CheckStyle, PMD) that should be installed for enforcing
            coding standards; see <xref
            linkend="chp.CodingStandardsEnforcement" />.</para>
          </sect3>

          <sect3>
            <title>Templates</title>

            <para>Expressive Objects provides a number of code templates which will
            reduce the typing when applying standard patterns.</para>

            <table>
              <title>Expressive Objects Code Templates</title>

              <tgroup cols="3">
                <colspec colwidth="100" />

                <colspec colwidth="60" />

                <colspec />

                <thead>
                  <row>
                    <entry align="center">Template</entry>

                    <entry align="center">Prefix</entry>

                    <entry align="center">Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/expressive-objects-templates.xml">expressive-objects-templates.xml</ulink></entry>

                    <entry><literal>is</literal></entry>

                    <entry>for writing <emphasis>ExpressiveObjects</emphasis> domain
                    objects, eg properties, collections, actions etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/junit4-templates.xml">junit4-templates.xml</ulink></entry>

                    <entry><literal>ju</literal></entry>

                    <entry>for writing <ulink url="http://junit.org">JUnit
                    4</ulink> tests, eg <classname>@Test</classname> methods,
                    <classname>@Before</classname> methods etc.</entry>
                  </row>

                  <row>
                    <entry><ulink
                    url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/junit4-templates.xml">jmock2-templates.xml</ulink></entry>

                    <entry><literal>jm</literal></entry>

                    <entry>for writing unit tests that use <ulink
                    url="http://jmock.org">JMock2</ulink>, eg mockery, context
                    etc</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>These can be downloaded from the <ulink
            url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/">ExpressiveObjects
            website</ulink>, and installed using Windows &gt; Preferences &gt;
            Java &gt; Editor &gt; Templates:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-editor-templates-junit.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </sect3>
        </sect2>

        <sect2>
          <title>Other IDEs</title>

          <para>All of the committers for <emphasis>ExpressiveObjects</emphasis> use the
          Eclipse IDE with the m2e/m2eclipse plugin, so the instructions
          provided in this guide reflect our own experience. However, if you
          use one of the other IDEs, please feel free to contribute patches to
          this documentation to explain the setup, and we'll add in your words
          of wisdom here.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Setting up Subversion Client</title>

        <para>As per <ulink
        url="http://www.apache.org/dev/version-control.html#https-svn-config">Apache
        standards</ulink>, the <varname>svn:eol-style</varname> and/or
        <varname>svn:mime-type</varname> property must be set on every file.
        Subversion can be configured to do this automatically for all new
        files:</para>

        <itemizedlist>
          <listitem>
            <para>Download the Apache subversion config file <ulink
            url="http://www.apache.org/dev/svn-eol-style.txt">svn-eol-style.txt</ulink>;</para>
          </listitem>

          <listitem>
            <para>As instructed, append to your local config file:</para>

            <itemizedlist>
              <listitem>
                <para>on *Nix, this is at
                <filename>~/.subversion/config</filename></para>
              </listitem>

              <listitem>
                <para>on Windows &lt;Vista, this is at <filename>C:\Documents
                and Settings\{username}\Application
                Data\Subversion\config</filename></para>
              </listitem>

              <listitem>
                <para>on Windows &gt;Vista, this is at
                <filename>C:\Users\{username}\AppData\Roaming\Subversion\config</filename></para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Note that in the code release chapter <xref
        linkend="chp.FormalRelease" /> there is also a manual procedure to
        ensure that all files are set correctly.</para>
      </sect1>
    </chapter>

    <chapter id="chp.SetUpDevelopmentEnvironment">
      <title>Obtaining Expressive Objects Source Code</title>

      <abstract>
        <para>Where to actually download the Expressive Objects source code from.</para>
      </abstract>

      <para>The <emphasis>ExpressiveObjects</emphasis> source code resides in a publicly
      accessible Subversion repository, hosted by the Apache Software
      Foundation. Anyone can check out the source code anonymously. In common
      with all Apache projects, commit (write) access is restricted to those
      who have been voted by the <emphasis>ExpressiveObjects</emphasis> community in as
      committers.</para>

      <sect1>
        <title>Anonymous (read-only) download</title>

        <para>If you do not have commit writes, then you can still check out
        the Expressive Objects source code for read-only using:</para>

        <programlisting>svn co http://svn.apache.org/repos/asf/incubator/expressive-objects/trunk .</programlisting>
      </sect1>

      <sect1>
        <title>Committer (read-write) download</title>

        <para>If you have commit writes, then you can check out the ExpressiveObjects
        source code for read/write using:</para>

        <programlisting>svn co https://svn.apache.org/repos/asf/incubator/expressive-objects/trunk .</programlisting>

        <para>Note that this uses the 'https' scheme rather than the 'http'
        scheme.</para>
      </sect1>

      <sect1>
        <title>Directories (trunk, tags and branches)</title>

        <para>Once you have downloaded the <filename>trunk</filename>, you
        should have the following directories:</para>

        <programlisting>trunk/
    framework/
    examples/
    domain-libs/</programlisting>

        <para>The <emphasis>ExpressiveObjects</emphasis> framework itself resides in the
        <filename>framework</filename> subdirectory. At the time of writing
        the other directories (<filename>examples</filename>,
        <filename>domain-libs</filename>, <filename>sandbox</filename> etc)
        are not formally released but are under <filename>trunk</filename>
        because they are related to the particular version of
        <emphasis>ExpressiveObjects</emphasis>.</para>

        <para>This guide does not discuss the code in these other directories,
        and deals only with the framework code (that is, the code within the
        <code>framework</code> directory). The root should therefore be
        considered <filename>trunk/framework</filename>.</para>

        <para>The <filename>tags</filename> directory is however flat:</para>

        <programlisting>tags/
    ...</programlisting>

        <para>This is because the immediate subdirectories under here will be
        the versions of each release, and we can't say anything in general
        about the structure or artifacts of future releases.</para>

        <para>The <filename>branches</filename> directory meanwhile is
        pretty-much adhoc; it should only hold the branches that are currently
        in use.</para>
      </sect1>
    </chapter>

    <chapter id="chp.BuildingExpressiveObjectsFromSource">
      <title>Building Expressive Objects from Source</title>

      <abstract>
        <para>How to build <emphasis>ExpressiveObjects</emphasis>' code modules, including
        the website site and docs, from source.</para>
      </abstract>

      <para><emphasis>ExpressiveObjects</emphasis> is built using
      <emphasis>Maven</emphasis>, so you should then be able to get going
      using a simple <code>mvn clean install</code>. However, there is a
      little more to it than that, because we do have a number of profiles
      which allow the build to be tailored in various ways. These profiles are
      also used to build the site and documentation.</para>

      <sect1>
        <title>Maven Profiles</title>

        <para>The Maven profiles that customize the build are activated by
        setting properties, where the property name determines the means by
        which the build is customized. They are:</para>

        <itemizedlist>
          <listitem>
            <para><code>-D modules=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>all</code></para>

                <para>This profile is intended for use when building the ExpressiveObjects
                modules (see <xref linkend="sec.BuildingBinaries" />).</para>

                <para>Using <code>-D modules=standard</code> will build the
                <filename>site-skin</filename>, <filename>applib</filename>,
                <filename>core</filename>, <filename>runtimes</filename>,
                <filename>progmodels</filename>,
                <filename>security</filename>, <filename>viewer</filename> and
                <filename>quickstart-archetype</filename> modules</para>

                <para>Since this profile is active by default, it can be
                omitted if no other -D properties are specified.</para>
              </listitem>

              <listitem>
                <para><code>site</code></para>

                <para>This profile is intended for use when building the ExpressiveObjects
                site and documentation (see <xref
                linkend="sec.BuildingSiteAndDocs" />).</para>

                <para>Using <code>-D modules=site</code> will build just the
                modules that constitute the site. This is similar to 'all'
                (above), but excludes <filename>site-skin</filename> and
                <filename>quickstart-archetype</filename>. Note that the usage
                of the quickstart archetype is documented in the main site (in
                pages of <package>[oai:expressive-objects]</package>).</para>
              </listitem>

              <listitem>
                <para><code>skin</code> or <code>applib</code> or
                <code>core</code> or <code>runtimes</code> or
                <code>progmodel</code> or <filename>security</filename> or
                <code>viewer</code> or <code>quickstart-archetype</code> or
                <code>examples</code></para>

                <para>Using <code>-D modules=...</code> for any of the above
                will build just the corresponding module set. It is intended
                primarily for quick-and-dirty builds of subsets of the
                build.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D site=</code></para>

            <para>This profile is intended only when building the site
            documentation (see <xref
            linkend="sec.BuildingSiteAndDocs" />).</para>

            <para><itemizedlist>
                <listitem>
                  <para><code>standard</code></para>

                  <para>Using <code>-D site=standard</code> when run under
                  <code>mvn site-deploy</code> will perform the standard
                  plugins for the Maven 'site' lifecycle, and will also run
                  the <filename>docbkx</filename> plugin (where relevant) in
                  order to build the DocBook documentation.</para>

                  <para>See <literal>/project/build/plugins</literal> in the
                  parent <filename>pom.xml</filename> for an up-to-date list
                  (note the binding to the 'site' phase).</para>
                </listitem>

                <listitem>
                  <para><code>full</code></para>

                  <para>This will perform a "full" build, which basically
                  means to running (at least) those reporting plugins for the
                  first-pass multi-module site. See <xref
                  linkend="sec.BuildingSiteAndDocs" /> for more
                  details.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para><code>-D patch=</code></para>

            <para>This profile is intended only when building the site
            documentation (see <xref
            linkend="sec.BuildingSiteAndDocs" />).</para>

            <itemizedlist>
              <listitem>
                <para><code>leaf</code></para>

                <para>This profile is used to "patch" leaf-level modules with
                reporting plugins. Specifically, these are the
                <filename>surefire-report</filename>,
                <filename>project-info-reports</filename>,
                <filename>cobertura</filename>,
                <filename>checkstyle</filename>, <filename>pmd</filename>,
                <filename>findbugs</filename>, <filename>javancss</filename>,
                <filename>jdepend</filename>, <filename>jxr</filename>,
                <filename>taglist</filename>, <filename>javadoc</filename>
                plugins.</para>

                <para>See
                <literal>/project/profiles/profile[id='patch-leaf']/reporting/plugins</literal>
                in the parent <filename>pom.xml</filename> for an up-to-date
                list of the reports.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><code>-D deploy=</code></para>

            <itemizedlist>
              <listitem>
                <para><code>local</code></para>

                <para>Using <code>-D deploy=local</code> will deploy the site
                to <filename>/tmp/m2-sites/expressive-objects</filename>, where you can
                check it. This can then be zipped up and scp'ed for remote
                deployment.</para>
              </listitem>
            </itemizedlist>

            <para>We do not deploy the site remotely to Apache's staging
            server because the time to upload the site artifacts is
            prohibitive.</para>
          </listitem>
        </itemizedlist>
      </sect1>

      <sect1 id="sec.BuildingBinaries">
        <title>Building the binaries</title>

        <sect2>
          <title><code>mvn clean install</code></title>

          <para>The module binaries are built in the regular way using:</para>

          <programlisting>mvn clean install</programlisting>

          <para>The perform the standard plugins for the Maven 'default'
          lifecycle, and will also run the <filename>enforcer</filename>,
          <filename>eclipse</filename>, <filename>source</filename> and
          <filename>jar</filename> plugins. See
          <literal>/project/build/plugins</literal> in the parent
          <filename>pom.xml</filename>for an up-to-date list.</para>

          <para>Once you have built this once, we recommend that in subsequent
          builds you include the -o (offline) flag in order to speed up
          builds:</para>

          <programlisting>mvn clean install -o</programlisting>

          <para>If using *nix, you might want to consider adding aliases for
          these two commands (eg mci and mcio).</para>
        </sect2>

        <sect2>
          <title>Smoke Test (Quickstart Archetype)</title>

          <para>Once you've build the source code, you might want to run a
          smoke test.</para>

          <para>The best way to do this is to use the quick start archetype.
          How to do this is documented on the website; however we want to run
          the archetype in a slightly different form, specifying the local
          catalog (ie to pick up the modules just built):</para>

          <programlisting>mvn archetype:generate \
     -D archetypeCatalog=local \
     -D archetypeGroupId=uk.co.objectconnexions.expressiveobjects \
     -D archetypeArtifactId=quickstart-archetype \
     -D groupId=com.mycompany.mygroup \
     -D artifactId=myapp</programlisting>

          <para>The <ulink
          url="http://incubator.apache.org/expressive-objects/quickstart-app.html">quickstart</ulink>
          page on the website then describes how to go about testing the
          generated classes.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.BuildingSiteAndDocs">
        <title>Building the site and documentation</title>

        <note>
          <para>The site documentation can only be built using Maven 3.</para>
        </note>

        <sect2>
          <title>Prerequisites</title>

          <para>Generally speaking all Maven artifacts are automatically
          downloads from the Maven <ulink
          url="http://repo1.maven.org/maven2/">central repo</ulink>. However,
          some artifacts must be manually installed or built, either because
          they haven't been formally released or because there are licensing
          restrictions preventing them from being hosted in the repository.
          These must therefore be downloaded and manually installed into your
          local repository (<filename>~/.m2/repository</filename>) .</para>

          <para><emphasis>Expressive Objects</emphasis> currently use the
          <acronym>JIMI</acronym> jar to generate documentation.
          Therefore:</para>

          <itemizedlist>
            <listitem>
              <para>From the <ulink
              url="http://java.sun.com/products/jimi/">Jimi page</ulink>,
              download the <filename>jimi1_0.zip</filename> file, and
              unzip.</para>
            </listitem>

            <listitem>
              <para>Within the unzipped files, you'll find the
              <filename>JimiProClasses.zip</filename> file. This is the
              <acronym>JAR</acronym> that needs to be installed. Make a note
              of its location.</para>
            </listitem>

            <listitem>
              <para>Install into your local Maven repository using:</para>

              <screen>mvn install:install-file       \
    -D groupId=com.java        \
    -D artifactId=jimi         \
    -D version=1.0             \
    -D packaging=jar           \
    -D file=/path/to/JimiProClasses.zip</screen>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Quick Build</title>

          <para>To quickly build of site and documentation:</para>

          <programlisting>mvn site-deploy -D modules=site -D deploy=local</programlisting>

          <para>This is suitable for verifying the generated web pages (ie the
          <filename>.html</filename> files generated from
          <filename>src/site/apt/*.apt</filename> files) as well as any
          DocBook guides sources
          (<filename>src/docbkx/guide/*.xml</filename>).</para>

          <para>As with the binaries build, after an initial build we suggest
          using the -o (offline) flag:</para>

          <programlisting>mvn site-deploy -D modules=site -D deploy=local -o</programlisting>
        </sect2>

        <sect2>
          <title>Full Build</title>

          <para>The difference between the quick build and the full build is
          that the latter includes all reporting plugins (such as
          <code>maven-project-info-reports-plugin</code>,
          <code>maven-javadoc-plugin</code>,
          <code>maven-checkstyle-plugin</code> and so on).</para>

          <para>Unfortunately, attempting to build the entire site as a
          multi-module site will fail, due to classpath problems with the
          javadoc plugin. As a workaround we have developed a script,
          <code>msdf.sh</code>, that builds most of the website in one pass
          (using the <code>-D site=full</code> profile), and then "patches" by
          building the leaf-level modules with a different profile (<code>-D
          patch=leaf</code>):</para>

          <programlisting>mvn site-deploy -D modules=site -D deploy=local -D site=full $*
root=`pwd`
for a in `cat modules`
do
  echo $a | grep ^# &gt;/dev/null
  if [ $? -ne 0 ]; then
    d=`echo $a | cut -d: -f1`
    n=`echo $a | cut -d: -f2`
    cd $d
    pwd
    if [ "$n" ]; then
      mvn site-deploy -D modules=site -D deploy=local -D patch=$n $*
      fi
  fi
  cd $root
done</programlisting>

          <para>The file is run from a flat file,
          <filename>modules</filename>, which is used to switch into each of
          the leaf-level modules to run the patching.</para>

          <para>To fully build the site, therefore just use:</para>

          <programlisting>sh msdf.sh -o</programlisting>

          <para>This takes a little longer to run, but is at least
          repeatable.</para>

          <sect3>
            <title id="sec.build.modules">"Modules" file</title>

            <para>The "modules" resource is manually edited, any new projects
            or modules must be added manually.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Smoke Test</title>

          <para>Both the quick build and the full build generate sites in
          <filename>/tmp/m2-sites/expressive-objects</filename>. Navigate to
          <filename>/tmp/m2-sites/expressive-objects/index.html</filename> and inspect the
          site.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <part id="prt.Contributing">
    <title>Contributing</title>

    <partintro>
      <para>If you are looking to contribute to <emphasis>Apache
      ExpressiveObjects</emphasis>, then this part of the guide offers guidance on how to
      contribute changes. It builds on the first part, <xref
      linkend="prt.Building" />, and assumes that you have installed any
      prerequisite software.</para>

      <para>Note that in order to gain commit writes to Apache Software
      Foundation projects, you must be voted in as a committer by the existing
      community. In order for that to happen, you will need to have shown
      demonstrated an ongoing and active interest. The easiest way to do this
      is to participate in discussions on the mailing list, to file or comment
      on JIRA tickets (bugs/defects), and to provide patches to bugs/defects
      by way of attaching to the relevant JIRA tickets.</para>
    </partintro>

    <chapter id="chp.CodingStandardsPrinciples">
      <title>Coding Standards Principles</title>

      <abstract>
        <para>This chapter describes the principles of the main coding
        standards adopted within the <emphasis>ExpressiveObjects</emphasis> codebase. The
        enforcement of these coding standards is through plugins to both the
        <acronym>IDE</acronym> and Maven,</para>
      </abstract>

      <para>This chapter describes the principles of the main coding standards
      adopted within the <emphasis>ExpressiveObjects</emphasis> codebase. The enforcement
      of these coding standards is through plugins to both the IDE and Maven,
      see <xref linkend="chp.CodingStandardsEnforcement" />.</para>

      <warning>
        <para>The style of framework code has developed over the lifetime of
        the project, so you won't find that all code satisfies the principles
        laid out here. We expect to address this piecemeal, incrementally
        moving towards these principles over time. The use of tools and
        plugins should help.</para>
      </warning>

      <sect1>
        <title>Code Formatting</title>

        <para>A code formatting conventions adopted are those in use within a
        number of other Apache projects. Some of the more important standards
        are:</para>

        <itemizedlist>
          <listitem>
            <para>Indentation is achieved using spaces, not tabs; there should
            be no tabs, except where needed in quoted strings</para>
          </listitem>

          <listitem>
            <para>Each level of indentation is 4 characters</para>
          </listitem>

          <listitem>
            <para>Code lines are wrapped at 120 characters, with a 4 space
            indentation for wrapped lines</para>
          </listitem>

          <listitem>
            <para>Statements should only be wrapped when too long for the
            line</para>
          </listitem>

          <listitem>
            <para>Braces ({}) start on the same line as their controlling
            statement and end, indented to the same level as the starting
            line, on a new line</para>
          </listitem>

          <listitem>
            <para>One blank line between package statement and imports</para>
          </listitem>

          <listitem>
            <para>One blank lines between imports and class/interface
            declaration</para>
          </listitem>

          <listitem>
            <para>One blank line between each method declaration, and blocks
            of field etc</para>
          </listitem>
        </itemizedlist>

        <para>See <xref linkend="chp.CodingStandardsEnforcement" /> for
        details on configuring the Eclipse code formatter for these
        standards.</para>
      </sect1>

      <sect1>
        <title>Naming</title>

        <sect2>
          <title>General Principles</title>

          <itemizedlist>
            <listitem>
              <para>All names appearing in code should be written in English
              and be full words.</para>
            </listitem>

            <listitem>
              <para>Abbreviations should be avoided unless they are well known
              and unambiguous.</para>
            </listitem>

            <listitem>
              <para>Complementary names should be used for complementary
              concepts, showing that they are related.</para>

              <para>For example: start/stop; next/previous; begin/end,
              open/close, show/hide.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Maven GroupId and ArtifactIds</title>

          <itemizedlist>
            <listitem>
              <para>all package names should be in lower case</para>
            </listitem>

            <listitem>
              <para>where an artifact is acting as an aggregator
              module:</para>

              <itemizedlist>
                <listitem>
                  <para>its groupId should be "one up" from the group it
                  manages</para>
                </listitem>

                <listitem>
                  <para>its artifactId should be plural and be the same as the
                  last element of the groupId it is aggregating for</para>
                </listitem>
              </itemizedlist>

              <para>For example, using the groupId:artifactId notation:</para>

              <itemizedlist>
                <listitem>
                  <para><code>uk.co.objectconnexions.expressiveobjects.objectstore</code>
                  is the aggregator for the "objectstores" group.</para>
                </listitem>

                <listitem>
                  <para>Artifact modules within this group would include
                  <code>uk.co.objectconnexions.expressiveobjects.objectstor:expressive-objects-objectstore-sql</code>
                  and
                  <code>uk.co.objectconnexions.expressiveobjects.objectstore:expressive-objects-objectstore-xml</code>.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Package Naming</title>

          <itemizedlist>
            <listitem>
              <para>the package name should be the concatenation of the group
              Id and the artifact Id</para>

              <para>For example, all packages in the
              <code>uk.co.objectconnexions.expressiveobjects.runtimes.dflt.objectstores:xml</code>
              module should reside in the
              <package>uk.co.objectconnexions.expressiveobjects.runtimes.dflt.objectstores.xml</package>
              package.</para>
            </listitem>

            <listitem>
              <para>all package names should be lower case</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Type Names</title>

          <itemizedlist>
            <listitem>
              <para>All class names should be nouns and written in camel case;
              eg <classname>ObjectAdapter</classname>,
              <classname>Configuration</classname>.</para>
            </listitem>

            <listitem>
              <para>Interfaces should <emphasis role="strong">not</emphasis>
              have an 'I' placed in front of it.</para>
            </listitem>

            <listitem>
              <para>Implemenations should not have an "Impl" suffix. Instead
              identify the implementation technology; eg
              <classname>AuthenticationManagerLdap</classname>.</para>

              <para>If there really is no good suffix, use "Default" rather
              than "Impl"; eg
              <classname>ProgrammingModelDefault</classname>.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Method Naming</title>

          <para><itemizedlist>
              <listitem>
                <para>Method names should be verbs and written in mixed case
                starting with lower case; eg
                <methodname>isActionStatic()</methodname>,
                <methodname>prepare()</methodname>.</para>
              </listitem>

              <listitem>
                <para>Accessor and mutator method names should be prefixed
                with <emphasis>get</emphasis> and <emphasis>set</emphasis>; eg
                <methodname>getActionName()</methodname>,
                <methodname>setDelay(...)</methodname>.</para>
              </listitem>

              <listitem>
                <para>Boolean variable and accessor method names should be
                prefixed with <emphasis>is</emphasis>,
                <emphasis>can</emphasis>, <emphasis>has</emphasis> or
                <emphasis>should</emphasis>; eg
                <methodname>isDirty()</methodname>,
                <methodname>canSave(...)</methodname>.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2>
          <title>Variable and Parameter Naming</title>

          <itemizedlist>
            <listitem>
              <para>Variable names must be in mixed case starting with lower
              case (never an underscore). Variables should have full sensible
              name, reflecting their purpose; eg <varname>count</varname>,
              <varname>target</varname>,
              <varname>previousOid</varname>.</para>
            </listitem>

            <listitem>
              <para>Short variable names should only be used within small
              blocks of codes or short method.</para>
            </listitem>

            <listitem>
              <para>Short variable names should never be used for parameter
              names</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Constant Naming</title>

          <para>Constants' names should be all uppercase with an underscore
          between words.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Code Style</title>

        <sect2>
          <title>General Remarks</title>

          <itemizedlist>
            <listitem>
              <para>Use <code>final</code> variables where possible</para>
            </listitem>

            <listitem>
              <para>All <code>final</code> parameters always</para>
            </listitem>

            <listitem>
              <para><emphasis>DO NOT</emphasis> check in commented-out
              code</para>

              <para>use the repository to revert to previous versions</para>
            </listitem>

            <listitem>
              <para>Go for "Clean Code" (see Robert Martin's book):</para>

              <itemizedlist>
                <listitem>
                  <para>Methods should typically be no more than 10 lines
                  long</para>
                </listitem>

                <listitem>
                  <para>Try to ensure methods are either commands or queries
                  (no side-effects)</para>
                </listitem>

                <listitem>
                  <para>Think and aim for immutability if possible</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Unless there is a clash of class names, fully qualified
              names should not be used in the code</para>
            </listitem>

            <listitem>
              <para>Add TODO, REVIEW, FIXME tasks to code wherever work is to
              be done on the code that you are not going to do now</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Commenting</title>

          <itemizedlist>
            <listitem>
              <para>Do not overuse comments - they go out-of-sync with the
              code, causing confusion.</para>
            </listitem>

            <listitem>
              <para>Comments <emphasis>should</emphasis> be used explaining
              the WHY</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the WHAT - that should be reflected in the method
              name</para>
            </listitem>

            <listitem>
              <para>Comments should <emphasis>not</emphasis> be used for
              explaining the HOW - read the body of the method instead</para>
            </listitem>

            <listitem>
              <para>Comments should not be used for explaining the WHO or the
              WHEN - that's what Subversion is for</para>
            </listitem>

            <listitem>
              <para>Don't introduce an explanatory comment in the middle of a
              method; instead, extract out the block as a method
              instead</para>
            </listitem>

            <listitem>
              <para>Comments should not contain any JavaDoc tags that are not
              complete.</para>

              <para>For example, remove <emphasis>@param</emphasis> markers if
              they don't add any information over and above the name of the
              parameter.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Imports</title>

          <itemizedlist>
            <listitem>
              <para>Imports should be grouped by major type, with a blank line
              between each.</para>

              <para>The order should be: java, javax, com, org,
              uk.co.objectconnexions.expressiveobjects.</para>
            </listitem>

            <listitem>
              <para>Classes, not packages, should be imported; don't use
              '*'</para>
            </listitem>

            <listitem>
              <para>No un-needed imports should be left in the code</para>
            </listitem>
          </itemizedlist>

          <para>Eclipse's Source &gt; Organize Imports can be used to organize
          imports. See <xref linkend="sec.ImportOrder" /> for details on how
          to configure Eclipse to enforce the required order.</para>
        </sect2>

        <sect2>
          <title>Use of Constants</title>

          <itemizedlist>
            <listitem>
              <para>Use constants instead of fixed phrases, except for
              messages, debug information and the like.</para>

              <para>For example:</para>

              <programlisting>if (name.equals(OPENING_TAG)) // Not if (name.equals("&lt;"))</programlisting>
            </listitem>

            <listitem>
              <para>Use constants instead of magic numbers.</para>

              <para>For example:</para>

              <programlisting>if (line &gt; MAXIMUM_LINES) // Not if (line &gt; 5)</programlisting>
            </listitem>

            <listitem>
              <para>Place public constants in a non-instantiable
              <classname>*Constants</classname> class for the package. This
              makes the constants easier to locate.</para>

              <para>For example, a 'remoting' package might have a
              RemotingConstants class:</para>

              <programlisting>public final class RemotingConstants {
    private RemotingConstants(){}

    public final static String HTTP_SCHEME = "http://";
    ...
}</programlisting>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Member Order</title>

          <para>Declarations within each class should follow the standard
          order:</para>

          <itemizedlist>
            <listitem>
              <para>Typed (inner classes etc)</para>
            </listitem>

            <listitem>
              <para>Static field</para>
            </listitem>

            <listitem>
              <para>Static initializers</para>
            </listitem>

            <listitem>
              <para>Static methods</para>
            </listitem>

            <listitem>
              <para>Initializers</para>
            </listitem>

            <listitem>
              <para>Fields</para>
            </listitem>

            <listitem>
              <para>Constructors</para>
            </listitem>

            <listitem>
              <para>Methods</para>
            </listitem>
          </itemizedlist>

          <para>This order can be specified in the preferences under
          <emphasis>Java/Appearance/Members Sort Order</emphasis>, and the
          code can be ordered using the <emphasis>Source/Sort
          Members</emphasis> options.</para>
        </sect2>

        <sect2>
          <title>Method Order</title>

          <para>Methods should be grouped by responsibility, with comment
          blocks used to delineate different responsibilities:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Authentication
///////////////////////////////////////////////////////////

... methods pertaining to authentication go here ...</programlisting>

          <para>By convention, methods which access the ExpressiveObjectsContext or are
          injected should go at the end:</para>

          <programlisting>///////////////////////////////////////////////////////////
// Dependencies (from context)
///////////////////////////////////////////////////////////

protected ExpressiveObjectsConfiguration getConfiguration() {
    return ExpressiveObjectsContext.getConfiguration();
}</programlisting>

          <para>These should be non-<code>static</code> and
          <code>protected</code> so that they can be overridden in tests with
          a stub or mock if required.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>License Notices</title>

        <para>In common with all other Apache projects, the standard Apache
        license notice should be present at the top of every code file.</para>
      </sect1>
    </chapter>

    <chapter id="chp.CodingStandardsEnforcement">
      <title>Coding Standards Enforcement</title>

      <abstract>
        <para>How we enforce coding standards (in Eclipse) for
        <emphasis>Expressive Objects</emphasis>.</para>
      </abstract>

      <para>The <emphasis>Expressive Objects</emphasis> community has standardized on
      using Eclipse as its preferred IDE. This chapter describes the main
      tools that are available to help enforce the coding standard principles
      described in <xref linkend="chp.CodingStandardsPrinciples" />.</para>

      <sect1 id="sec.CodeStyleTemplates">
        <title>Code Style Templates</title>

        <para>All Apache projects are required to have a standard license
        comment at the top of every code file. Eclipse can be configured so
        that these licenses are automatically available in every new
        file.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/Apache-code-style-template.xml">code
        style template config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code style &gt; Code Templates:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-code-style-code-templates.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>Make sure that the "Automatically add comments for new methods
        and types" is selected. Now, when you create a new class using File
        &gt; New &gt; Class, the license comments will already be in
        place.</para>
      </sect1>

      <sect1 id="sec.CodeStyleFormatter">
        <title>Code Style Formatter</title>

        <para><emphasis>Expressive Objects</emphasis> has adopted a set of coding
        standards used by several other Apache projects, and compatible with
        our own principles. These projects have previously developed a
        configuration file for Eclipse's Code Style Formatter feature, meaning
        that the formatting can be applied easily.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/Apache-code-style-formatting.xml">code
        style formatter config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Formatter:</para>

        <screenshot>
          <screeninfo>Eclipse Java Code Style Formatter</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-code-style-formatter.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>To run the formatter, use Source &gt; Format. Note that this can
        be done recursively, from a higher level package if required.</para>

        <para>Alternatively, you can use Cleanup, (see <xref
        linkend="sec.CodeStyleCleanup" />), which performs formatting and a
        number of other checks too.</para>

        <para>A final option is to you configure formatting to be run
        automatically as a Save action (see <xref
        linkend="sec.SaveActions" />).</para>
      </sect1>

      <sect1 id="sec.CodeStyleCleanup">
        <title>Code Style Cleanup</title>

        <para><emphasis>Expressive Objects</emphasis> provides a configuration file
        for Eclipse's Code Style Cleanup feature. This defines a set of
        operations aimed at removing simple problems with the code, as well as
        running the formatter (see <xref
        linkend="sec.CodeStyleFormatter" />).</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/Apache-ExpressiveObjects-code-style-cleanup.xml">code
        style cleanup config file</ulink> and import using Windows &gt;
        Preferences &gt; Java &gt; Code Style &gt; Cleanup:</para>

        <para><screenshot>
            <screeninfo>Configuring Eclipse's Java Code Style
            Cleanup</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-java-code-style-clean-up.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot></para>

        <para>The cleanup wizard can be run on an adhoc basis using Source
        &gt; Cleanup. Note that this can be done recursively, from a higher
        level package if required. For example:</para>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (1 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-1.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (2 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-2.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <screenshot>
          <screeninfo>Running Source Code Cleanup (3 of 3)</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/Eclipse-cleanup-3.png" scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect1>

      <sect1 id="sec.ImportOrder">
        <title>Import Order</title>

        <para>Our coding standard principles recommend a fixed import order.
        This can be configured using Eclipse's Code Style Organize Imports
        feature.</para>

        <para>Therefore, download the <ulink
        url="http://incubator.apache.org/expressive-objects/ide/eclipse/templates/expressive-objects.importorder">code
        style organize imports config file</ulink> and import using Windows
        &gt; Preferences &gt; Java &gt; Code Style &gt; Organize
        Imports:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/dev-env/windows-preferences-java-codestyle-organize-imports.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The import order can be reorganized using Source &gt; Organize
        Imports. Note that this can be done recursively, from a higher level
        package if required. It can also be defined to be run automatically as
        a Save Action, see <xref linkend="sec.SaveActions" />.</para>
      </sect1>

      <sect1 id="sec.SaveActions">
        <title>Save Actions</title>

        <para>While the formatter (<xref linkend="sec.CodeStyleFormatter" />)
        and organize imports (<xref linkend="sec.ImportOrder" />) can be run
        manually, it is also possible to run the formatter whenever code is
        saved.</para>

        <para>To configure this, navigate to Windows &gt; Preferences &gt;
        Save &gt; Actions and enable:</para>

        <screenshot>
          <screeninfo>Eclipse Save Actions</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/dev-env/windows-preferences-java-editor-save-actions.png"
                         scale="50" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>From the dialog it is also possible to automatically perform the
        same actions as the cleanup (the Configure button). However, it
        doesn't seem possible (as of Eclipse 3.7) to export/import these
        settings within a config file.</para>

        <para>Our recommendation for now is just to enable the simple
        formatting on save and organize imports, and not waste time manually
        configuring any other actions on save too.</para>

        <warning>
          <para>We make the above recommendation slightly tentatively;
          reformatting all lines clearly could cause a lot of changes.</para>
        </warning>
      </sect1>

      <sect1>
        <title>Subversion Properties</title>

        <para>An the svn:eol-style property should be set for each
        file.</para>
      </sect1>
    </chapter>

    <chapter id="chp.CodeQuality">
      <title>Code Quality</title>

      <abstract>
        <para>Using plugins such as Checkstyle and PMD to improve code
        quality.</para>
      </abstract>

      <para>As well as using the tools to enforce code standards, there are
      also numerous tools available to improve the overall code quality. As
      many projects do, Expressive Objects uses these tools to improve the quality of
      its codebase.</para>

      <para>The tools that we configure are intended to run in both the IDE
      (for immediate visibility to the contributor community) and within Maven
      (for visibility to the user community). There is some overlap between
      them.</para>

      <itemizedlist>
        <listitem>
          <para>the <ulink url="http://www.eclemma.org/">EclEmma
          plugin</ulink> (for Eclipse), and <ulink
          url="http://cobertura.sourceforge.net/">Cobertura</ulink> (for
          Maven) test coverage results</para>
        </listitem>

        <listitem>
          <para>Eclipse's own compiler warnings configuration</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://eclipse-cs.sourceforge.net">eclipse-cs
          plugin</ulink>, for <ulink
          url="http://checkstyle.sourceforge.net">Checkstyle</ulink>
          support</para>
        </listitem>

        <listitem>
          <para>the <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse plugin</ulink>, for <ulink
          url="http://pmd.sourceforge.net">PMD</ulink> support</para>
        </listitem>
      </itemizedlist>

      <para>In addition, we recommend that <ulink
      url="http://findbugs.sourceforge.net/manual/eclipse.html">findBugs is
      installed into the IDE</ulink>. However, findBugs is not part of the
      Maven build because it would flag violations that, to suppress, would
      require introducing a dependency on its associated library which is
      published under <acronym>LGPL</acronym> (not compatible with the
      <acronym>ASF</acronym>).</para>

      <para>This chapter describes the configuration of some of these
      tools.</para>

      <warning>
        <para>This chapter is more of a statement-of-intent for the future,
        rather than reflecting the current status. Right now, if we run these
        tools with the config files that we've located/inherited, we will end
        up with an overwhelming number of issues. There is also some overlap
        between these config files, which still needs to be eliminated.</para>

        <para>So, the plan is to pare down these config files to a bare
        minimum, and then slowly ratchet up the tests as we aim to improve the
        overall code quality going forward.</para>

        <para>By all means go ahead and configure these plugins, but be aware
        that we have not - yet - fully configured them nor are tracking their
        outputs.</para>
      </warning>

      <sect1>
        <title>Code Coverage (Cobertura and Emma)</title>

        <para>Code coverage of unit testing is provided using
        <emphasis>EclEmma</emphasis> for Eclipse and
        <emphasis>Cobertura</emphasis> for Maven. Although there is an Eclipse
        plugin for <emphasis>Cobertura</emphasis>, it has not been maintained
        and no longer runs on the latest versions of Eclipse. Conversely,
        although there is a Maven plugin for Emma, the
        <emphasis>Cobertura</emphasis> plugin gives reports that are more
        easily understood.</para>

        <note>
          <para>In fact, in the future we may move to <ulink
          url="http://www.eclemma.org/jacoco/">JaCoCo</ulink>, a new code
          coverage tool being developed by the originators of EclEmma. One of
          the benefits of <emphasis>JaCoCo</emphasis> is that the
          instrumentation is performed via a java:agent, ie on-the-fly. This
          would allow code coverage to be captured during integration tests,
          for example, without requiring a specific build.</para>
        </note>

        <sect2>
          <title>Eclipse Plugin (Emma)</title>

          <para>The <ulink url="http://www.eclemma.org/">EclEmma</ulink>
          Eclipse plugin offers transparent code coverage directly within the
          Eclipse IDE. Rather than run the tests using Run &gt; Run As &gt;
          JUnit Test, instead use Coverage &gt; Coverage As &gt; JUnit Test.
          This will instrument the code and then provide a coverage view and
          highlights in the editor to show which code has been
          exercised.</para>

          <para>The coverage view looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's Coverage view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-coverage-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The highlighted editor looks like:</para>

          <screenshot>
            <screeninfo>EclEmma's highlights for the editord</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/eclemma-editor.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Use the menu item on the Coverage View to select between
          manage the history of coverage runs (selecting none / deleting all
          removes the highlights on the editor).</para>

          <para>To change what code is instrumented, use Run &gt; Coverage
          ...</para>
        </sect2>

        <sect2>
          <title>Maven Plugin (Cobertura)</title>

          <para>The expressive-objects <acronym>POM</acronym> automatically includes the
          Maven <ulink
          url="http://mojo.codehaus.org/cobertura-maven-plugin">Cobertura
          plugin</ulink>:</para>

          <para><screen>&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;inherited&gt;true&lt;/inherited&gt;          
&lt;/plugin&gt;</screen></para>

          <para>This plugin is not bound to any Maven lifecycle phase, and is
          not intended to be run other than as a report within <classname>mvn
          site</classname>. For more immediate feedback, use the Emma Eclipse
          plugin, above.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Compiler Warnings</title>

        <para>Eclipse can be configured so that Java compiler warnings can be
        elevated to being fatal errors, or conversely moved down to
        ignored.</para>

        <para>At the current time we do not configuration file for Eclipse,
        but we do intend to do this in the future. The plan will be to start
        with a relatively lax set of warnings (ie most set to ignore) in order
        that we can get 0 warnings in the build. Then we'll slowly start to
        elevate back up to warning, and use that as a way to improve the
        codebase piecemeal.</para>
      </sect1>

      <sect1 id="sec.Checkstyle">
        <title>Checkstyle</title>

        <para><ulink
        url="http://checkstyle.sourceforge.net">Checkstyle</ulink> is the
        first of three powerful tools (the others being <ulink
        url="http://pmd.sourceforge.net">PMD</ulink> and <ulink
        url="http://findbugs.sourceforge.net/">FindBugs) for </ulink>enforcing
        coding standards and detecting certain classes of likely errors. The
        <ulink
        url="http://incubator.apache.org/expressive-objects/codequality/checkstyle.xml">checkstyle
        definition config file</ulink> for <emphasis>Expressive Objects</emphasis> is
        derived from Sun's standards, with a number of modifications.</para>

        <para>Checkstyle integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://eclipse-cs.sourceforge.net">eclipse-cs</ulink> plugin
          allows Checkstyle violations to be flagged as warnings or errors
          within the Problems view of the Eclipse IDE. To associate
          <emphasis>eclipse-cs</emphasis> with the Checkstyle config file, use
          Windows &gt; Preferences, and specify the config file as <ulink
          url="../../../codequality/checkstyle.xml">http://incubator.apache.org/expressive-objects/codequality/checkstyle.xml</ulink>.
          Alternatively, the file is available locally in
          <filename>trunk/framework/src/site/resources/codequality/checkstyle.xml</filename>.</para>

          <para><remark>TODO: the screenshot is out of date</remark></para>

          <screenshot>
            <screeninfo>Configuring Eclipse-CS</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-eclipse-cs.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para><warning>
              <para>According to eclipse-cs' documentation, it is meant to
              integrate with m2eclipse and transparently pick up any Maven
              configuration of mvn-checkstyle-plugin. This doesn't seem to
              work for me, though.</para>
            </warning></para>

          <para>You may then need to enable CheckStyle for each project as
          required, using the context menu in Package Explorer. CheckStyle
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-view-checkstyle.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>These violations are dynamic updated, so fixing any problem
          should automatically remove the violation from the problems view. A
          quick fix short cut (ctrl+1) is available for some of these.</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The expressive-objects parent <acronym>POM</acronym> automatically includes
          the <ulink
          url="http://maven.apache.org/plugins/maven-checkstyle-plugin/">Maven
          checkstyle plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;checkstyle.configLocation&gt;
        ${trunkBaseDir}/src/site/resources/codequality/checkstyle.xml
    &lt;/checkstyle.configLocation&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.6&lt;/version&gt;
            &lt;configuration&gt;
                &lt;configLocation&gt;${checkstyle.configLocation}&lt;/configLocation&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen>This plugin is not bound to any Maven lifecycle
          phase, and is not intended to be run other than as a report within
          <classname>mvn site</classname>. In particular, note that the
          configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn checkstyle:checkstyle</classname>. For
          more immediate feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.PMD">
        <title>PMD</title>

        <para><ulink url="http://pmd.sourceforge.net">PMD</ulink> is another
        static analysis tool that - like FindBugs and Checkstyle - checks for
        problematic code (possible bugs, dead code, suboptimal code and so
        on). As for Checkstyle, <emphasis>Expressive Objects</emphasis> defines a
        <ulink url="http://incubator.apache.org/expressive-objects/codequality/pmd.xml">PMD
        config file</ulink>, this one adapted from other projects within
        Apache.</para>

        <para>PMD integrates with both Maven and with Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink url="http://pmd.sourceforge.net/eclipse">PMD for
          eclipse</ulink> plugin allows PMD violations to be flagged as
          warnings or errors within the Problems view of the Eclipse IDE. The
          plugin also provides a custom "PMD" perspective which also lists all
          violations. To associate <emphasis>PMD for Eclipse</emphasis> with
          the PMD config file, use Windows &gt; Preferences:</para>

          <screenshot>
            <screeninfo>Configuring PMD</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/windows-preferences-pmd.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>First, use "Clear All" to remove the default rule set. Then,
          use "Import rule set" and specify the pmd.xml file. Unlike the
          Checkstyle plugin, this must be a local file so must be referenced
          locally, from
          <filename>trunk/framework/src/site/resources/codequality/pmd.xml</filename>.</para>

          <para>Also unlike the Checkstyle plugin, PMD violations are not
          continually updated against the code (it is not implemented as an
          Eclipse builder). To perform a check, you must use the context menu
          in Package Explorer and then use PMD &gt; Check Code with PMD. This
          will switch into the PMD perspective; the Violations view will
          indicate any code that needs attention:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Violations
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/pmd-violations-view.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Alternatively, you can switch back to the Java view; any PMD
          violations show up in the Problems view:</para>

          <screenshot>
            <screeninfo>Viewing PMD violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/problems-viewpmd.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Once violations are fixed, the Check must be performed again
          to refresh both of these views.</para>

          <para>Note, to prevent PMD from switching to its own perspective,
          use Windows &gt; Preferences &gt; PMD and then disable "Show PMD
          Perspective when checking code".</para>
        </sect2>

        <sect2>
          <title>Maven Plugin</title>

          <para>The expressive-objects parent <acronym>POM</acronym> automatically includes
          the Maven <ulink
          url="http://maven.apache.org/plugins/maven-pmd-plugin/">PMD
          plugin</ulink>:</para>

          <para><screen>&lt;properties&gt;
    &lt;pmd.ruleset&gt;
        ${trunkBaseDir}/src/site/resources/codequality/pmd.xml
    &lt;/pmd.ruleset&gt;
&lt;/properties&gt;
&lt;reporting&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
            &lt;configuration&gt;
                &lt;sourceEncoding&gt;${project.build.sourceEncoding}&lt;/sourceEncoding&gt;
                &lt;minimumTokens&gt;100&lt;/minimumTokens&gt;
                &lt;linkXref&gt;true&lt;/linkXref&gt;
                &lt;targetJdk&gt;${compileTarget}&lt;/targetJdk&gt;
                &lt;rulesets&gt;
                    &lt;ruleset&gt;${pmd.ruleset}&lt;/ruleset&gt;
                &lt;/rulesets&gt;
                &lt;excludeRoots&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/modello
                    &lt;/excludeRoot&gt;
                    &lt;excludeRoot&gt;
                        ${project.build.directory}/generated-sources/plugin
                    &lt;/excludeRoot&gt;
                &lt;/excludeRoots&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/reporting&gt;</screen></para>

          <para>As for Checkstyle, this plugin is not bound to any Maven
          lifecycle phase, and is not intended to be run other than as a
          report within <classname>mvn site</classname>. In particular, note
          that the configuration is only defined in the
          <sgmltag>&lt;reporting&gt;</sgmltag> section, so it isn't possible
          to run using <classname>mvn pmd:pmd</classname>. For more immediate
          feedback, use the Eclipse plugin, above.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.FindBugs">
        <title>FindBugs</title>

        <para><ulink url="http://findbugs.sourceforge.net/">FindBugs</ulink>
        is a tool that - like CheckStyle and PMD - can be used to enforce
        coding standards and detecting certain classes of likely
        errors.</para>

        <para>FindBugs does not (seem to) have a configuration file; it is
        just run against a codebase and reports all errors.</para>

        <para>Although FindBugs integrates with both Maven and with Eclipse,
        we do not include it in the Maven build. This is because the companion
        library that is used to suppress certain types of warning is licensed
        under LGPL, which the ASF views as being incompatible with the ASF v2
        license.</para>

        <para>Nevertheless, we do recommend installing FindBugs for
        Eclipse.</para>

        <sect2>
          <title>Eclipse Plugin</title>

          <para>The <ulink
          url="http://findbugs.cs.umd.edu/eclipse/">findbugs</ulink> plugin
          allows FindBugs to be run against a single Eclipse project at a
          time, eg from the context menu:</para>

          <screenshot>
            <screeninfo>Running FindBugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-context-menu.png"
                           scale="45" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If this finds any errors, then <screenshot>
              <screeninfo>Bugs Found!</screeninfo>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/dev-env/findbugs-bugs-found-message.png"
                             scale="50" />
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>You can then switch to the findbugs perspective to review and
          fix the potential bugs:</para>

          <screenshot>
            <screeninfo>yViewing CheckStyle violations in the Problems
            view</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-perspective.png"
                           scale="40" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>If you want to suppress, rather than fix, the bug, you can
          annotate using the
          <classname>@edu.umd.cs.findbugs.annotations.SuppressWarnings</classname>
          annotion. For example:</para>

          <screenshot>
            <screeninfo>Suppressing warnings from findbugs</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/dev-env/findbugs-suppress-warnings.png"
                           scale="60" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocumentation">
      <title>Writing Documentation</title>

      <abstract>
        <para>This chapter provides some guidance on writing both DocBook and
        site (APT) documentation.</para>
      </abstract>

      <para>This chapter provides some guidance on writing both DocBook and
      site (APT) documentation, explaining what sort of content should go into
      each of these types, as well as the mechanics of actually writing these
      types of documents.</para>

      <para>See <xref linkend="sec.BuildingSiteAndDocs" /> for details on how
      to build the site documentation.</para>

      <para>See <xref linkend="chp.WritingSiteDocs" /> and <xref
      linkend="chp.WritingDocBookDocs" /> for details on how to write APT or
      DocBook documentation.</para>

      <sect1>
        <title>Overview</title>

        <para>Maven provides the ability to automatically create a website
        holding various reports, such as Checkstyle, <acronym>PMD</acronym>,
        test results and code coverage. At least as far as <emphasis>Apache
        ExpressiveObjects</emphasis> is concerned, the site created reflects the module
        hierarchy, with at least one single index.html page to introduce each
        module. The main site (corresponding to expressive-objects parent POM) has rather
        more content, eg discussing the naked objects pattern.</para>

        <para>This additional site content can be written in a number of
        formats, but the most straightforward is to use Maven's own APT
        format. APT here stands for "almost plain text"; it's basically a
        wiki-like syntax. The index.html for each file would typically
        correspond to <filename>index.apt</filename> file; the site content
        lives under <filename>src/site</filename> (relative to each module's
        <filename>pom.xml</filename>).</para>

        <para>In addition, a number of the modules have formal documentation
        in the form of (all-in-one) user/programmer/developer guides. These
        are written in DocBook 4.5, so that they can be processed by the
        <filename>docbkx-maven-plugin</filename> and converted to either
        <acronym>PDF</acronym> or <acronym>HTML</acronym>. These guides can be
        found under <filename>src/docbkx</filename> (relative to the module's
        <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Maven Modules</title>

        <para>The following tables indicates which modules have DocBook
        guides, and which do not:</para>

        <table>
          <title>Expressive Objects Modules</title>

          <tgroup cols="8">
            <colspec colname="_1" colwidth="20" />

            <colspec colname="_2" colwidth="20" />

            <colspec colname="_3" colwidth="20" />

            <colspec colname="_4" colwidth="60" />

            <colspec colname="_5" />

            <colspec colname="_6" />

            <colspec align="center" colwidth="50" />

            <colspec />

            <thead>
              <row>
                <entry align="center" nameend="_6"
                namest="_1">Directory</entry>

                <entry align="center">DocBk?</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry nameend="_6" namest="_1">./</entry>

                <entry>Y</entry>

                <entry>Parent</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">applib</entry>

                <entry>Y</entry>

                <entry>Applib for default programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">core</entry>

                <entry>Y</entry>

                <entry>Parent for core framework</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">testsupport</entry>

                <entry></entry>

                <entry>Unit testing support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">common</entry>

                <entry></entry>

                <entry>Common utilities</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">metamodel</entry>

                <entry></entry>

                <entry>Meta-model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">progmodel</entry>

                <entry></entry>

                <entry>Reusable programming model facets</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">runtime</entry>

                <entry></entry>

                <entry>Common classes for runtime implementations
                constructs</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">webapp</entry>

                <entry></entry>

                <entry>Common filters etc. for web-based viewers</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">progmodel</entry>

                <entry>Y</entry>

                <entry>Parent for programming model implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry></entry>

                <entry>Default (Java5) programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">groovy</entry>

                <entry></entry>

                <entry>Groovy programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">wrapper</entry>

                <entry></entry>

                <entry>Wrapper programming model</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">security</entry>

                <entry>Y</entry>

                <entry>Parent for security (authentication and authorization)
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry></entry>

                <entry>Default (no-op) implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">file</entry>

                <entry></entry>

                <entry>Simple file-based implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">ldap</entry>

                <entry></entry>

                <entry>LDAP implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">sql</entry>

                <entry></entry>

                <entry>Simple SQL-based implementation</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">runtimes</entry>

                <entry></entry>

                <entry>Parent for runtime implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_6" namest="_3">dflt</entry>

                <entry>Y</entry>

                <entry>Default runtime implementation, includes documentation
                on bttecode providers, default object store and default
                profile store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">remoting</entry>

                <entry>Y</entry>

                <entry>Default runtime's remoting support</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">bytecode</entry>

                <entry>N</entry>

                <entry>Parent for default runtime's bytecode implementations;
                documentation for child implementations included in default
                runtime's.</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">objectstores</entry>

                <entry></entry>

                <entry>Parent for default runtime's object store
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>dflt</entry>

                <entry></entry>

                <entry>Default (in-memory) object store; documentation
                included in default runtime's, see above</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry>Y</entry>

                <entry>XML Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>sql</entry>

                <entry>Y</entry>

                <entry>SQL Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>nosql</entry>

                <entry>Y</entry>

                <entry>NoSQL Object Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry nameend="_6" namest="_5">profilestores</entry>

                <entry></entry>

                <entry>Parent for default runtime's profilte store
                implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_4" namest="_2"></entry>

                <entry></entry>

                <entry>dflt</entry>

                <entry></entry>

                <entry>Default (in-memory) profile store; documentation
                included in default runtime's, see above</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>sql</entry>

                <entry></entry>

                <entry>SQL-based Profile Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3"></entry>

                <entry></entry>

                <entry>xml</entry>

                <entry></entry>

                <entry>XML Profile Store</entry>
              </row>

              <row>
                <entry></entry>

                <entry nameend="_6" namest="_2">viewer</entry>

                <entry></entry>

                <entry>Parent for viewer implementations</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">bdd</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>BDD viewer (<ulink
                url="http://concordion.org">Concordion</ulink> test framework
                integration)</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">dnd</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>DnD viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">html</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>HTML viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">junit</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>JUnit viewer (<ulink
                url="http://junit.org">JUnit</ulink> test framework
                integration)</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">restful</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>Restful viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">scimpi</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry>Scimpi (customizable web UI) viewer</entry>
              </row>

              <row>
                <entry></entry>

                <entry></entry>

                <entry nameend="_4" namest="_3">wicket</entry>

                <entry></entry>

                <entry></entry>

                <entry>Y</entry>

                <entry><ulink url="http://wicket.apache.org">Apache
                Wicket</ulink>-based viewer</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>In general, the principle is for the DocBook guide to be
        reasonably complete. The docbkx-maven-plugin is capable of
        transforming the guide into fully hyperlinked HTML, and the
        configuration within the pom.xml is such that this is published as
        part of the site. In addition (as already mentioned) the DocBook is
        also converted into <acronym>PDF</acronym> for those that prefer that
        form (eg to download and print out).</para>

        <para>The APT site documentation therefore should be used to provide
        just enough of an overview so that a prospective user can understand
        what the particular module is for, and to provide signposting to the
        more detailed docbook guide where needed. Much of this signposting is
        taken care of already, being configured in the site menu.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingSiteDocs">
      <title>APT Quick Start</title>

      <abstract>
        <para>Common use cases for writingy site documentation using
        APT.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Expressive Objects</emphasis> uses Maven's <acronym>APT</acronym>
      (almost plain text) syntax for most of its site documentation. This
      chapter is a quick-start on using APT.</para>

      <sect1 id="sec.additional-site-content">
        <title>File Formats and Locations</title>

        <para>When writing additional site content</para>

        <itemizedlist>
          <listitem>
            <para>documents go in <filename>src/site/xxx</filename>, where
            <filename>xxx</filename> is the file format.</para>

            <para>For example <acronym>APT</acronym> documents live under
            <filename>src/site/apt</filename>.</para>
          </listitem>

          <listitem>
            <para>images and other resources go in src/site/resources and are
            referenced relative to this directory.</para>

            <para>For example images typically live under
            <filename>src/site/resources/images</filename>.</para>
          </listitem>
        </itemizedlist>

        <para>For example, <filename>src/site/apt/index.apt</filename> will
        correspond to index.html for the module.</para>

        <para>Maven sites can include documentation in any of a number of file
        formats:</para>

        <table>
          <title>File formats supported by Maven site</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry align="center">Format</entry>

                <entry align="center">Type</entry>

                <entry align="center">Location</entry>

                <entry align="center">Reference</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>APT</entry>

                <entry>Wiki-like format</entry>

                <entry>src/site/apt/xxx.apt</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/apt-format.html">Maven
                Doxia site (APT reference)</ulink></entry>
              </row>

              <row>
                <entry>DocBook</entry>

                <entry>Full power of DocBook</entry>

                <entry>src/site/docbook/xxx.xml</entry>

                <entry><ulink
                url="http://docbook.org/tdg/en/html/quickref.html">DocBook
                site (quick ref)</ulink></entry>
              </row>

              <row>
                <entry>FML</entry>

                <entry>FAQ Markup Language</entry>

                <entry>src/site/fml/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/fml-format.html">Maven
                Doxia site (FML reference)</ulink></entry>
              </row>

              <row>
                <entry>XDoc</entry>

                <entry>Simplified DocBook, used in Maven 1.</entry>

                <entry>src/site/xdoc/xxx.xml</entry>

                <entry><ulink
                url="http://maven.apache.org/doxia/references/xdoc-format.html">Maven
                Doxia site (XDoc reference)</ulink></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Of these, <acronym>APT</acronym> is the lowest entry, and is the
        generally recommended format. APT reference is available online at
        <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">http://maven.apache.org/doxia/references/apt-format.html</ulink>,
        but the following are some of the main formatting tips.</para>
      </sect1>

      <sect1>
        <title>Sections and Sub-sections</title>

        <para>Sections are not indented, paragraphs are.</para>

        <screen>My section title (not indented).

  My paragraph first line (indented by 2 spaces).  There is no need for remaining 
sentences in the paragraph to be indented.  A blank line terminates the paragraph.</screen>

        <para>Subsections can be defined using leading asterisks
        (<varname>*</varname>) to indicate the subsection level
        indents:</para>

        <screen>Section title

* Sub-section title

** Sub-sub-section title

*** Sub-sub-sub-section title</screen>
      </sect1>

      <sect1>
        <title>Fonts</title>

        <para>In addition to regular font, we can specify italics, bold or
        monospaced:</para>

        <screen>  &lt;italicised text&gt;
  &lt;&lt;bold text&gt;&gt;
  &lt;&lt;&lt;monospaced text&gt;&gt;&gt;</screen>
      </sect1>

      <sect1>
        <title>Lists</title>

        <para>List items are indented, and begin with an asterisk
        (<varname>*</varname>)</para>

        <screen>  * List item 1.

  * List item 2.

    Paragraph contained in list item 2.

    * Sub-list item 1.

    * Sub-list item 2.

  * List item 3.</screen>

        <para>To force the end of a list, use the <varname>[]</varname>
        pseudo-element:</para>

        <screen>  * List item 3.
 
  []

  This text is not in the list</screen>
      </sect1>

      <sect1>
        <title>Links and Figures</title>

        <para>To create an external link, use:</para>

        <screen>  Link to {{http://www.pixware.fr}}.
  or 
  Link to {{{http://www.pixware.fr}Pixware home page}}.</screen>

        <para>To create an internal link (to a page relative to this one),
        use:</para>

        <screen>  Link to {{{./docbkx/guide/expressive-objects-applib.pdf}AppLib Guide (PDF)}}</screen>

        <warning>
          <para>the "./" is required for internal links.</para>
        </warning>

        <para>To create an anchor, use:</para>

        <screen>  {Anchor}. This text is anchored.
  and then
  Link to {{anchor}}.
  or
  Link to {{{anchor}showing alternate text}}</screen>

        <para>Figures are specified by</para>

        <screen>  [images/foo/bar.png] Figure caption</screen>
      </sect1>

      <sect1>
        <title>Code Blocks (verbatim text)</title>

        <para>To quote a code block, use 3 dashes (<varname>---</varname>)
        before and after:</para>

        <screen>----------------------------------------
public class FooBar {
  ...
}
----------------------------------------</screen>

        <para>To put into a box, use a plus symbol
        (<varname>+--</varname>)</para>
      </sect1>

      <sect1>
        <title>Other Code Elements</title>

        <para>In addition to the above, <acronym>APT</acronym> supports
        tables, horizontal rules (===), page breaks, comments and special
        characters. See the <ulink
        url="http://maven.apache.org/doxia/references/apt-format.html">Maven
        Doxia</ulink> site for further details.</para>
      </sect1>
    </chapter>

    <chapter id="chp.WritingDocBookDocs">
      <title>DocBook Quick Start</title>

      <abstract>
        <para>Common use cases for writing formal documentation using
        DocBook.</para>
      </abstract>

      <para>As discussed in <xref linkend="chp.WritingDocumentation" />,
      <emphasis>Expressive Objects</emphasis> uses DocBook as its primary
      documentation format, each significant module providing its own guide
      which is then converted into both PDF and HTML forms.</para>

      <para>DocBook is just XML, so you could edit the text with any text
      editor. However, you may find it easier to use an editor; and the we
      recommend here is from <ulink
      url="http://www.xmlmind.com/xmleditor">XMLMind</ulink>. The personal
      edition is free for use on open source projects.</para>

      <para>Below is a quick notes on using XmlMind.</para>

      <sect1>
        <title>Writing DocBook Guides (using XMLMind)</title>

        <para>DocBook guides can be found in src/docbkx (relative to the
        module's <filename>pom.xml</filename>).</para>
      </sect1>

      <sect1>
        <title>Creating a Document</title>

        <para>Use <emphasis>File &gt; New Document</emphasis> to create an
        <emphasis>DocBook </emphasis>document. This will create a v4.5
        docbook:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-new-document.png"
                       scale="50" />
          </imageobject>
        </mediaobject>

        <para>The file should be saved under
        <filename>src/docbkx/guide</filename>.</para>

        <para>Once the file has been created, change the
        <literal>DOCTYPE</literal> entry to reference <acronym>DTD</acronym>s
        stored locally. We use the <literal>svn:externals</literal> property
        to "symbolically link" 3 directories under
        <filename>trunk/framework/src/docbkx/guide</filename>
        (<filename>dtd-4.5</filename>, <filename>images</filename> and
        <filename>style</filename>); these can therefore be referenced
        locally.</para>

        <para>In addition, the standard Apache license comment is
        required.</para>

        <para>Here's the boilerplate to copy-n-paste in:</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
--&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"file:./src/docbkx/dtd-4.5/docbookx.dtd"&gt;

&lt;book&gt;
    ...
&lt;/book&gt;</programlisting>

        <para>Note the <acronym>DTD</acronym> location, as
        <filename>file:./src/test/resources/dtd</filename>.</para>
      </sect1>

      <sect1>
        <title>Loading a Document</title>

        <para>To load an existing document, simply use
        <emphasis>File&gt;Open</emphasis>. This will display the DocBook
        styled using the CSS. DocBook does allow the CSS to be customized; at
        the time of writing we have not done this for DocBook.</para>
      </sect1>

      <sect1>
        <title>Navigating the Document</title>

        <para>To navigate around, use up arrow, down arrow, pg up, pg down to
        move around.</para>

        <para>It is also possible to navigate by opening up an alternative
        view, using <emphasis>View &gt; Add</emphasis> to bring up a
        dialog:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-add-view.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>For example, this is a view of the raw XML:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-view-left.png" scale="40" />
          </imageobject>
        </mediaobject>

        <para>Alternatively it could be styled as a document structure:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-document-structure-view.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <para>This can then be used to navigate, collapsing sections if
        needed.</para>
      </sect1>

      <sect1>
        <title>Knowing where you are</title>

        <para>The position within the document is shown as a XPath like
        expression. If the unstyled view is open, then the current position is
        highlighted (even if the section is collapsed). In the styled view the
        current cursor position is shown just as in a regular word
        processor.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-navigate-xpath.png"
                       scale="35" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Selecting Content (eg to delete/move, or prior to adding new
        content)s</title>

        <para>The XMLMind editor understands the structure of DocBook
        documents, and will only let you enter content where it is valid to do
        so. What you can do (in terms of edits) therefore depends on where you
        are in the document.</para>

        <para>Use <emphasis>Select &gt; Select Parent</emphasis>
        (<command>ctrl+up</command>) to successively select larger segments of
        the document; and <emphasis>Select &gt; Select Child</emphasis>
        (<command>ctrl+down</command>) to selects smaller segments.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-1.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-2.png"
                       scale="40" />
          </imageobject>
        </mediaobject>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/doc/DocBook-selectingcontent-3.png"
                       scale="40" />
          </imageobject>
        </mediaobject>
      </sect1>

      <sect1>
        <title>Writing Content</title>

        <sect2>
          <title>Adding New Paragraphs</title>

          <para>To modify the content in a paragraph, just start writing!
          Hitting enter will start a new paragraph; delete will join two
          paragraphs together. Behind the scenes the &lt;para&gt; elements are
          added.</para>
        </sect2>

        <sect2>
          <title>Formatting Existing Paragraphs</title>

          <para>Using <emphasis>Edit &gt; Insert</emphasis>
          (<command>ctrl+I</command>) within a paragraph will only bring up
          elements that are valid within that paragraph, such as
          <literal>emphasis</literal>:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-insert-within.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>That said, for adding tags within a paragraph (such as
          emboldening or emphasis), it is generally easier to write the words
          and then use <emphasis>Edit &gt; Convert (wrap)</emphasis>. First,
          highlight the words by holding shift and then navigating as usual
          (eg <command>shift+left</command>, <command>shift+right</command>).
          Then, use <emphasis>Edit&gt;Convert(wrap)</emphasis> to add the
          emphasis.</para>
        </sect2>

        <sect2>
          <title>Adding a new heading (sect1, sect2) etc</title>

          <para>In general, use <emphasis>Edit &gt; Insert After</emphasis>
          (<command>ctrl+J</command>) after to add new content after the
          current location, and <emphasis>Edit &gt; Insert Before</emphasis>
          (<command>ctrl+H</command>) to insert before. This will bring up a
          list of valid elements in the top right:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-inserting-sections.png"
                         scale="40" />
            </imageobject>
          </mediaobject>

          <para>Note that it isn't possible to add a new subsection in the
          middle of existing paragraphs; as the screenshot below shows,
          attempting to add a section "sect3" under <emphasis>this</emphasis>
          paragraph would not be allowed, for example:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/doc/DocBook-cant-add-section-in-middle.png"
                         scale="70" />
            </imageobject>
          </mediaobject>

          <para>Instead, go to last paragraph (eg like this one) and add the
          subsection there. Then cut-and-paste the content around as
          required.</para>
        </sect2>

        <sect2>
          <title>Adding lists</title>

          <para>Adding lists are added as for any element: use
          <command>ctrl+J</command> and then select
          <literal>itemizedlist</literal> (unordered list) or
          <literal>&lt;orderedlist&gt;</literal>. You’ll get the first
          <literal>listitem</literal> for free. Create new list items by
          selecting the current list item (<command>ctrl+up</command> as far
          as required) then use <command>ctrl+J</command>.</para>

          <para>If you want to terminate the list, then select the current
          list (<command>ctrl+up</command>), then <command>ctrl+J</command>
          and select <literal>para</literal> for next paragraph.</para>
        </sect2>

        <sect2>
          <title>Adding Images</title>

          <para>Images should be saved as <filename>.png</filename> files,
          under the <filename>images</filename> subdirectory (relative the
          directory holding <filename>xxx-guide.xml</filename>).</para>

          <para>Images should be embedded into the documentation using either
          a <sgmltag>mediaobject/imageobject/imagedata</sgmltag> tag or a
          <sgmltag>screenshot/mediaobject/imageobject/imagedata</sgmltag> tag.
          In XMLMind, use Edit&gt;Insert and select screenshot:</para>

          <screenshot>
            <screeninfo>Image</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-imagedata.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>The outer <sgmltag>imagedata</sgmltag> tag should have an
          appropriate <varname>scale</varname> attribute; a value of 50 (note:
          <emphasis>not</emphasis> 50%) works reasonably well:</para>

          <screenshot>
            <screeninfo>ImageData Attributes</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/doc/embedded-image-attributes.png"
                           scale="50" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect2>

        <sect2>
          <title>Adding and Altering Tables</title>

          <para>Use <emphasis>Edit &gt; Insert After</emphasis> (or
          <emphasis>Edit &gt; Insert Before</emphasis>), and then select one
          of the table elements:</para>

          <itemizedlist>
            <listitem>
              <para><literal>table</literal></para>
            </listitem>

            <listitem>
              <para><literal>table (head_column)</literal></para>

              <para>to include a header column (on the left hand side)</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row)</literal></para>

              <para>to include a header row</para>
            </listitem>

            <listitem>
              <para><literal>table (head_row_column)</literal></para>

              <para>to include a header row and column</para>
            </listitem>
          </itemizedlist>

          <para>This will create a 2x2 table body with a header row and/or
          column if requested. Then use DocBook &gt; Column &gt; Insert or
          DocBook &gt; Row &gt; Insert to adjust the number of columns and
          rows as required.</para>

          <para>To adjust the width of columns, select the first row and then
          use Edit&gt;Insert before to insert &lt;colspec&gt; elements.</para>

          <para>It's also possible to merge cells using
          DocBook&gt;Cell&gt;Increment ... Span</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Deleting Content</title>

        <para>To delete content, select the content first
        (<command>ctrl+up</command> / <command>ctrl+down</command>), then
        <emphasis>Edit &gt; Delete</emphasis>
        (<command>ctrl+K</command>).</para>

        <para>In general you shouldn’t need to use the <emphasis>Edit &gt;
        Force Deletion</emphasis>; instead try adjusting the range being
        selected if <emphasis>Edit &gt; Delete</emphasis> isn’t
        enabled.</para>
      </sect1>

      <sect1>
        <title>Moving Content</title>

        <para>Select the content you want using <command>ctrl+up</command>. If
        necessary extend the selection using <emphasis>Select &gt; Extend
        Selection to Following Sibling</emphasis> or <emphasis>Select &gt;
        Extend Selection to Preceding Sibling</emphasis>.</para>

        <para>Use <emphasis>Edit &gt; Cut</emphasis> to cut, and then
        <emphasis>Edit &gt; Paste After</emphasis> or <emphasis>Edit &gt;
        Paste Before</emphasis> to paste wherever. If these are greyed out,
        bear in mind that XmlMind won’t let you paste in content where it
        would be invalid. If necessary, adjust the selection until they become
        enabled.</para>
      </sect1>
    </chapter>
  </part>

  <part>
    <title>Release Process</title>

    <partintro>
      <para>This part of the guide describes the release process for
      <emphasis>Expressive Objects</emphasis>, in particular as it applies to the
      requirements of the Apache Software Foundation. It consists of:</para>

      <itemizedlist>
        <listitem>
          <para>an overview of the release process (see <xref
          linkend="chp.ReleaseOverview" />)</para>
        </listitem>

        <listitem>
          <para>the detailed steps for performing a snapshot release (see
          <xref linkend="chp.SnapshotReleases" />)</para>
        </listitem>

        <listitem>
          <para>the detailed steps for performing a formal release (see <xref
          linkend="chp.FormalRelease" />)</para>
        </listitem>
      </itemizedlist>
    </partintro>

    <chapter id="chp.ReleaseOverview">
      <title>Overview</title>

      <para>The following diagram summarizes the various stages involved in
      building and releasing <emphasis>Expressive Objects</emphasis>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/release/release-process.png" scale="55" />
        </imageobject>
      </mediaobject>

      <para>The steps are:</para>

      <orderedlist>
        <listitem>
          <para>check out code using svn checkout (see <xref
          linkend="chp.BuildingExpressiveObjectsFromSource" />), update and commit
          changes.</para>
        </listitem>

        <listitem>
          <para>make changes, implements features, fixes bugs. These are
          installed, in the normal way, to your local repo using <code>mvn
          install</code>.</para>
        </listitem>

        <listitem>
          <para>when the codebase is ready for a snapshot release, manually
          deploy the snapshot into the Apache snapshot repo. This is discussed
          further in <xref linkend="sec.ManuallyDeploySnapshot" />.</para>

          <para>In addition, the snapshot version of the site may be deployed
          to the website. This process for this is the same as for staging the
          website during a formal release, see (7) below and also<xref
          linkend="sec.StageTheWebsite" />.</para>
        </listitem>

        <listitem>
          <para>when the codebase is ready for a formal release, the release
          manager creates a branch in svn in preparation for the following
          steps</para>
        </listitem>

        <listitem>
          <para>using the branch, the release manager uses <code>mvn
          release:prepare</code> to produce the release artifacts. This
          goal:</para>

          <itemizedlist>
            <listitem>
              <para>update the <acronym>POM</acronym>s from
              <filename>x.x.x-SNAPSHOT-incubating</filename> to
              <filename>x.x.x-incubating</filename></para>
            </listitem>

            <listitem>
              <para>builds and verifies the codebase</para>
            </listitem>

            <listitem>
              <para>commits the changes</para>
            </listitem>

            <listitem>
              <para>creates a tag copy</para>
            </listitem>

            <listitem>
              <para>updates the <acronym>POM</acronym>s for the next
              iteration, ie from <filename>x.x.x-incubating</filename> to
              <filename>x.y.0-incubating-SNAPSHOT</filename></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>next, the <code>mvn release:perform</code> command is used to
          upload the signed versions of the artifacts (which includes the
          source release <acronym>ZIP</acronym>) to the Apache staging
          repository. See <xref
          linkend="sec.UploadReleaseForVoting" />.</para>
        </listitem>

        <listitem>
          <para>also in preparation for the release, the website is staged so
          that it can be reviewed. See <xref
          linkend="sec.StageTheWebsite" />.</para>
        </listitem>

        <listitem>
          <para>the release is voted on by the community. While in the
          incubator a vote must also be performed by the Incubator PMC (ie on
          mailto:incubator@apache.org). It is permissible to perform these in
          parallel if required. See <xref linkend="sec.Voting" /></para>
        </listitem>
      </orderedlist>

      <para>Assuming that the vote passes:</para>

      <orderedlist continuation="continues">
        <listitem>
          <para>the Maven artifacts should be promoted from the staging
          repository to release repository (again, see <xref
          linkend="sec.PromotingReleaseToDistribution" />), from
          which...</para>
        </listitem>

        <listitem>
          <para>... the artifacts will automatically be replicated up to Maven
          central repo</para>
        </listitem>

        <listitem>
          <para>the source release should be copied from the release
          repository to the "dist" folder, where it will be mirrored. It can
          also be referenced as a download at this point. See <xref
          linkend="sec.PromotingReleaseToDistribution" /></para>
        </listitem>

        <listitem>
          <para>The website should be promoted, and checked that download
          links etc. are correct; see <xref
          linkend="sec.PromoteAndUpdateWebsite" />.</para>
        </listitem>
      </orderedlist>

      <para>If the vote is rejected, then the branch, tag and staging repo are
      deleted/dropped, the necessary fixes are made and then the above steps
      are performed again.</para>

      <para>The following chapters provide detail on the above steps.</para>
    </chapter>

    <chapter id="chp.SnapshotReleases">
      <title>Snapshot Release</title>

      <para>This chapter describes the steps that make up deploying a snapshot
      release.</para>

      <para>As you'll see if you compare them with the steps required to make
      a formal release (see <xref linkend="chp.FormalRelease" />), they are
      significantly less arduous. This is because the legal status of a
      snapshot release does NOT constitute an actual release of the ASF; it is
      merely provided as a convenience for users.</para>

      <sect1>
        <title>Contributor Prerequisites</title>

        <para>The only prerequistes for performing a release is that the
        contributor has configured their environment. This involves updating
        your <filename>settings.xml</filename> file:</para>

        <programlisting>&lt;settings&gt;
  &lt;servers&gt;
    &lt;!-- To publish a snapshot of some part of Maven --&gt;
    &lt;server&gt;
      &lt;id&gt;apache.snapshots.https&lt;/id&gt;
      &lt;username&gt;xxx&lt;/username&gt;
      &lt;password&gt;yyy&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>

        <para>where 'xxx' and 'yyy' constitute your apache LDAP username and
        password.</para>

        <para>This information is as documented in the <ulink
        url="http://www.apache.org/dev/publishing-maven-artifacts.html#dev-env">ASF
        documentation</ulink>.</para>

        <para><note>
            <para>It is also possible to configure to use
            <filename>.ssh</filename> secure keys, and thereby avoid
            hardcoding your Apache <acronym>LDAP</acronym> password into your
            <filename>.m2/settings.xml</filename> file. A description of how
            to do this can be found, for example, <ulink
            url="http://incubator.apache.org/bval/cwiki/release-setup.html">here</ulink>.</para>
          </note></para>
      </sect1>

      <sect1 id="sec.ManuallyDeploySnapshot">
        <title>Manually Deploy Snapshot</title>

        <sect2>
          <title>Sanity Check</title>

          <para>Before deploying the snapshot, perform a quick sanity
          check:</para>

          <itemizedlist>
            <listitem>
              <para>builds ok (<code>mvn clean install</code>)</para>
            </listitem>

            <listitem>
              <para>archetype runs ok (<code>-D
              archetypeCatalog=local</code>)</para>
            </listitem>

            <listitem>
              <para>app generated from the archetype runs ok</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Deploy All Modules</title>

          <para>Deploy all modules using:</para>

          <programlisting>mvn -D deploy=snapshot deploy</programlisting>

          <para>This will deploy all the modules that make up a release,
          including the archetype.</para>

          <para>To confirm that they are present, browse to the Nexus
          repository manager <ulink
          url="https://repository.apache.org">https://repository.apache.org</ulink>
          and search for "expressive-objects".</para>

          <para>Be warned: this is liable take a long time.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter id="chp.FormalRelease">
      <title>Formal Release</title>

      <abstract>
        <para>This chapter describes the steps that make up a formal
        release.</para>
      </abstract>

      <para>Before starting off the release process it is essential to gain
      consensus on the expressive-objects-dev mailing list that this is the right time for a
      release and to agree its content. Allow at least a week for this
      discussion.</para>

      <para>Once agreed, the formal release can begin. The actual steps
      required to perform the release are outlined in the diagram in <xref
      linkend="chp.ReleaseOverview" />). This chapter corresponds to steps 4
      through 11; that is:</para>

      <itemizedlist>
        <listitem>
          <para>create a branch to prepare the release</para>
        </listitem>

        <listitem>
          <para>use <code>mvn release:prepare</code> to generate the signed
          artifacts and create an <acronym>SVN</acronym> tag</para>
        </listitem>

        <listitem>
          <para>use <code>mvn release:perform</code> to upload the signed
          artifacts to the Apache staging repository</para>
        </listitem>

        <listitem>
          <para>vote on the staged artifacts (in particular, the signed source
          release ZIP from which the remaining artifacts are derivable)</para>
        </listitem>

        <listitem>
          <para>on successful vote:</para>

          <itemizedlist>
            <listitem>
              <para>promote the staged artifacts</para>
            </listitem>

            <listitem>
              <para>merge in the branch back to into trunk</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>on failed vote:</para>

          <itemizedlist>
            <listitem>
              <para>drop the staging repository</para>
            </listitem>

            <listitem>
              <para>delete the branch and tag</para>
            </listitem>

            <listitem>
              <para>fix problems and go round round the loop again.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>Before any of this can happen, there are a number of
      prerequisites, in terms of (a) the codebase itself, (b) the community
      process, and (c) the contributor acting as release manager and
      performing the release. This chapter starts by discussing these
      prerequisites, then moves onto the detailed release process.</para>

      <sect1>
        <title>Code Prerequisites</title>

        <para>Before making any formal release, there are a number of
        prerequisites that should always be checked.</para>

        <sect2>
          <title>Update Dependency Versions</title>

          <para>First, check (via <ulink
          url="http://search.maven.org">http://search.maven.org</ulink>)
          whether there is a newer version of the Apache parent
          [org.apache.apache]. If so, update the &lt;parent&gt; element in
          ExpressiveObjects' own parent POM [uk.co.objectconnexions.expressiveobjects:expressive-objects].</para>

          <para>Second, use the Maven versions plugin can be used to determine
          if there are newer versions of any of ExpressiveObjects' dependencies:</para>

          <programlisting>$ mvn versions:display-dependency-updates</programlisting>

          <para>Update any of the dependencies that are out-of-date.</para>
        </sect2>

        <sect2 id="sec.SanityCheck">
          <title>Sanity check</title>

          <para>Next, perform a quick sanity check:</para>

          <itemizedlist>
            <listitem>
              <para>builds ok (<code>mvn clean install -o</code>)</para>
            </listitem>

            <listitem>
              <para>site builds ok (<code>sh msdf.sh -o</code>), see <xref
              linkend="sec.build.modules" />.</para>
            </listitem>

            <listitem>
              <para>archetype is up-to-date</para>
            </listitem>

            <listitem>
              <para>archetype runs ok (<code>-D
              archetypeCatalog=local</code>)</para>
            </listitem>

            <listitem>
              <para>app generated from the archetype runs ok</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Fix Line Endings and Subversion Properties</title>

          <para>All Expressive Objects code should be saved with UNIX line endings; for
          contributors that use Windows, the <command>dos2unix</command>
          command should be used to convert line endings.</para>

          <para>In addition, the <varname>svn:eol-style</varname> property
          should be set to <classname>native</classname>, and
          <varname>svn:mime-type</varname> property should be set
          appropriately, as per this <ulink
          url="http://www.apache.org/dev/version-control.html#https-svn-config">Apache
          guidance</ulink>,</para>

          <para>Both line endings and Subversion properties can be set by
          running the provided script:</para>

          <programlisting>$ ./fix-lineendings-and-svnprops.sh</programlisting>
        </sect2>

        <sect2>
          <title>Code Cleanup / Formatting</title>

          <para>Make sure that all source code has been cleaned up and
          formatted according to the <emphasis>Expressive Objects</emphasis> and
          <acronym>ASF</acronym> conventions:</para>

          <itemizedlist>
            <listitem>
              <para>code formatting should be checked as per <xref
              linkend="sec.CodeStyleFormatter" />;</para>
            </listitem>

            <listitem>
              <para>imports should be organized as per <xref
              linkend="sec.ImportOrder" />;</para>
            </listitem>

            <listitem>
              <para>code cleanup should be performed as per <xref
              linkend="sec.CodeStyleCleanup" /> (this performs both code
              formatting and organizing imports)</para>
            </listitem>
          </itemizedlist>

          <para>Optionally, you might also want to run and address warnings
          from:</para>

          <itemizedlist>
            <listitem>
              <para>checkstyle, as per <xref
              linkend="sec.Checkstyle" />;</para>
            </listitem>

            <listitem>
              <para>PMD, as per <xref linkend="sec.PMD" />;</para>
            </listitem>

            <listitem>
              <para>findbugs, as per <xref linkend="sec.FindBugs" />.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2 id="sec.RatTool">
          <title>License Notice (RAT Tool)</title>

          <para>The Apache Release Audit Tool (<acronym>RAT</acronym>) is
          designed to perform a number of basic checks, most signifcant being
          missing copyright header files.</para>

          <para>The <emphasis>ExpressiveObjects</emphasis> parent <acronym>POM</acronym>
          specifies the RAT Maven plugin, with the following custom
          configuration:</para>

          <table>
            <title>RAT plugin Configuration Exclusions</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry align="center">Subtype</entry>

                  <entry align="center">File path(s)</entry>

                  <entry align="center">Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>IDE-specific</entry>

                  <entry>**/.project, **/.classpath, **/.settings/**</entry>

                  <entry>Eclipse project files</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/*.launch</entry>

                  <entry>Eclipse launch configuration file</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>src/site/resources/ide/eclipse/**</entry>

                  <entry>Various Eclipse config files for contributors'
                  use</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/*java.hsp</entry>

                  <entry><ulink
                  url="http://www.headwaysoftware.com/products/?code=Structure101">Structure101</ulink>
                  project file</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/*.ucd, **/*.ucls</entry>

                  <entry><ulink url="http://www.soyatec.com/euml2/">Soyatec
                  (<acronym>UML</acronym> plugin)</ulink> project
                  files</entry>
                </row>

                <row>
                  <entry>Image formats</entry>

                  <entry>**/*.svg</entry>

                  <entry>Scalable Vector Graphics</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/*.pdn</entry>

                  <entry>Paint.NET format</entry>
                </row>

                <row>
                  <entry>Data files</entry>

                  <entry>**/*.json</entry>

                  <entry>JSON (test) data</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/expressive-objects.log</entry>

                  <entry>ExpressiveObjects' log file (byproduct of tests)</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/rat.txt</entry>

                  <entry>RAT's own audit file</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/fixture-data</entry>

                  <entry>SQL Object Store fixture data</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/test.data</entry>

                  <entry>SQL Object Store fixture data</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/xml/**/*.xml</entry>

                  <entry>XML Object Store fixture data</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>tmp/tests/*.xml</entry>

                  <entry>XML Object Store fixture data</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/ldap-conf/**</entry>

                  <entry>LDAP Security fixture data</entry>
                </row>

                <row>
                  <entry>Archetype Support</entry>

                  <entry>**/src/main/resources/resources.txt</entry>

                  <entry>Resource file</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>**/src/main/appended-resources/<para>
                  supplemental-models.xml</para></entry>

                  <entry>(Empty) supplemental models</entry>
                </row>

                <row>
                  <entry>Program formats</entry>

                  <entry>**/*.min.js</entry>

                  <entry>Minified Javascript (note that the non-Minified
                  Javascript equivalents is checked for its license)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>In addition, a number of licenses are configured:</para>

          <table>
            <title>RAT plugin Configuration Additional Licenses</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry align="center">License</entry>

                  <entry align="center">Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>Apache 2.0</entry>

                  <entry>The RAT tool searches for an older version of the
                  Apache license header. This additional license reconfigures
                  RAT to use the current form of words</entry>
                </row>

                <row>
                  <entry>MIT</entry>

                  <entry>JQuery (bundled with ExpressiveObjects) is dual licensed under
                  MIT</entry>
                </row>

                <row>
                  <entry>JMock</entry>

                  <entry>Expressive Objects bundles up source code from the still-to-be
                  released JMock 2.6-RC2 codebase.</entry>
                </row>

                <row>
                  <entry>DocBook</entry>

                  <entry>Like many other Apache projects, Expressive Objects generates its
                  documentation in DocBook form. In order to speed up
                  generation, Expressive Objects has a local copy of the DocBook DTDs,
                  Entities etc. Key phrases from these files are configured so
                  that RAT identifies these files as valid to use.</entry>
                </row>

                <row>
                  <entry>XHTML</entry>

                  <entry>Expressive Objects also has a dependency on the XHTML-strict
                  DTD.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>To run the RAT tool, first clean up any generated
          artifacts:</para>

          <programlisting>mvn clean -P integration-tests</programlisting>

          <para>Then, run the tool using:</para>

          <programlisting>mvn org.apache.rat:apache-rat-plugin:check</programlisting>

          <para><note>
              <para>Do <emphasis>not</emphasis> use mvn rat:check; depending
              on your local Maven configuratoin this may bring down the
              obsolete mvn-rat-plugin from Codehaus repo.</para>
            </note>All being well the command should succeed:</para>

          <programlisting>...
[INFO] JUnit Viewer ...................................... SUCCESS [0.162s]
[INFO] JUnit Tests for TCK ............................... SUCCESS [0.039s]
[INFO] quickstart-archetype .............................. SUCCESS [0.382s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 30.796s
[INFO] Finished at: Wed Feb 01 00:36:25 GMT 2012
[INFO] Final Memory: 41M/967M
[INFO] ------------------------------------------------------------------------p</programlisting>

          <para>If it does not, then review the <filename>rat.txt</filename>
          file in the failing module's <filename>target</filename> directory.
          Missing license notes are indicated using the key:</para>

          <itemizedlist>
            <listitem>
              <para><filename>!???</filename> is used to identify those files
              that are missing license notes</para>
            </listitem>

            <listitem>
              <para><filename>tests-common/*</filename> and
              <filename>tests/*</filename> ignores certain test files</para>
            </listitem>

            <listitem>
              <para>hsql-db are generated HSQLDB directories</para>
            </listitem>
          </itemizedlist>

          <para>Investigate and fix any reported violations.</para>

          <para>You can use the groovy script "addmissinglicenses.groovy" to
          automatically insert missing copyright headers:</para>

          <para><programlisting>groovy addmissinglicenses.groovy</programlisting></para>

          <para>The actual files checked are those with extensions specified
          in the line:</para>

          <para><programlisting>def fileEndings = [".java", ".htm"]</programlisting></para>
        </sect2>

        <sect2>
          <title>Missing License Check</title>

          <para>Although <emphasis>Expressive Objects</emphasis> has no dependencies
          which have incompatible licenses, the <acronym>POM</acronym>s for
          these dependencies (in the Maven central repo) do not necessarily
          contain the required license information. When the release process
          is run this results in the generated
          <filename>DEPENDENCIES</filename> file and generated Maven site
          listing dependencies as having "unknown" licenses.</para>

          <para>Fortunately, Maven allows the missing information to be
          provided by configuring the
          <package>maven-remote-resources-plugin</package>. This is stored in
          the
          <filename>src/main/appended-resources/supplemental-models.xml</filename>
          file in the parent <package>[oai:expressive-objects]</package> module.</para>

          <para>To capture the missing license information, use:</para>

          <programlisting>mvn license:download-licenses</programlisting>

          <para>This Maven plugin creates a <filename>license.xml</filename>
          file in the <filename>target/generated-resources</filename>
          directory of each module.</para>

          <para>Then, run the <emphasis>ExpressiveObjects</emphasis> script:</para>

          <programlisting>groovy checkmissinglicenses.groovy</programlisting>

          <para>This searches for all <filename>licenses.xml</filename> files,
          and compares them against the contents of the
          <filename>supplemental-models.xml</filename> file. For example, the
          output could be something like:</para>

          <programlisting>licenses to add to supplemental-models.xml:

[org.slf4j, slf4j-api, 1.5.7]
[org.codehaus.groovy, groovy-all, 1.7.2]


licenses to remove from supplemental-models.xml (are spurious):

[org.slf4j, slf4j-api, 1.5.2]</programlisting>

          <para>If any missing entries are listed or are spurious, then update
          <filename>supplemental-models.xml</filename> and try again.</para>

          <note>
            <para>Ignore any missing license warnings for the TCK modules;
            this is a result of the TCK modules for the viewers (eg
            bdd-concordion-tck) depending on the TCK dom, fixtures etc.</para>
          </note>
        </sect2>
      </sect1>

      <sect1>
        <title>JIRA Prerequisites</title>

        <sect2>
          <title>Close all JIRA tickets for the release</title>

          <para>All JIRA tickets for the release should be closed, or moved to
          future releases if not yet addressed.</para>
        </sect2>

        <sect2>
          <title>Generate Release Notes</title>

          <para>Each release should have a release note page called
          <filename>release-x.x.x.html</filename>, in
          <filename>src/site/resources</filename> (in
          <package>[oai:expressive-objects]</package> parent module). This is linked to from
          the download page
          (<filename>src/site/apt/downloads.apt.vm</filename>); the download
          page should not need updating.</para>

          <para>The release notes can be generated using JIRA, using the
          procedure documented <ulink
          url="http://confluence.atlassian.com/display/JIRA/Creating+Release+Notes">here</ulink>.
          If any of the tickets closed are tasks/subtasks, then please edit
          the contents of the file to associate them back together
          again.</para>
        </sect2>

        <sect2>
          <title>Update STATUS file</title>

          <para>The trunk holds a <filename>STATUS</filename> file which is a
          brief summary of the current status of the project. Update this file
          prior to cutting the release.</para>
        </sect2>

        <sect2>
          <title>Update downloads.apt.vm</title>

          <para>The website's
          <filename>src/site/apt/downloads.apt.vm</filename> file lists (what
          will be) the current release, along with any archived releases.
          Update this to reflect how things will be once the release is
          complete. (We also double-check it at the end of the release
          process, see <xref linkend="sec.PromoteAndUpdateWebsite" />).</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Contributor (Release Manager) Prerequisites</title>

        <sect2>
          <title>Key Generation</title>

          <para>In order that a contributor can make a release it is necessary
          for them to have generated a key and had that key recognized by
          other members of the <acronym>ASF</acronym>. See the key generation
          appendix, <xref linkend="apx.KeyGeneration" />, for more
          details.</para>
        </sect2>

        <sect2>
          <title>Update Maven Settings file
          (<filename>~/.m2/settings.xml</filename>)</title>

          <para>The Maven release plugin will automatically sign the release,
          however it is necessary to update the
          <filename>~/.m2/settings.xml</filename> file with your
          <acronym>GPG</acronym> passphrase in order that it can use your
          secret key. This is defined under a profile so that it is activated
          only when we perform a release (as defined by
          <package>[org,apache:apache]</package> parent
          <acronym>POM</acronym>.</para>

          <para>Therefore, make the following</para>

          <programlisting>&lt;settings&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;apache-release&lt;/id&gt;
      &lt;properties&gt;
    &lt;gpg.passphrase&gt;xxx xxx xxx xxx xxx xxx xxx&lt;/gpg.passphrase&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;</programlisting>

          <para>In addition, to allow the release plugin to tag SVN changes,
          you must either add in your LDAP username/password or configure
          .ssh:</para>

          <programlisting>&lt;settings&gt;
  ...
  &lt;servers&gt;
    ...
    &lt;server&gt;
      &lt;id&gt;apache.releases.https&lt;/id&gt;
      &lt;username&gt;xxxx&lt;/username&gt;
      &lt;password&gt;xxxx&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>
        </sect2>
      </sect1>

      <sect1 id="sec.MavenReleasePrepare">
        <title>Preparing a Release (<code>mvn release:prepare</code>)</title>

        <para>We use <acronym>SVN</acronym> branches to create releases,
        allowing development to continue on trunk uninterrupted. The
        <filename>mvn-release-plugin</filename> is configured with
        <code>&lt;tagBase&gt;</code> so that the tag appears in the "usual"
        location.</para>

        <para>Once a successful final release has been deployed, we do a merge
        of the updated <acronym>POM</acronym>s (and any fixes made) from the
        release branch back into trunk.</para>

        <para>The process of getting to the voting stage will result in an
        <acronym>SVN</acronym> branch, an <acronym>SVN</acronym> tag, and a
        staging repository being created. It is possible (more than possible!)
        that when the vote is cast that problems will be found with the
        release artifacts. In this case the branch, tags and staging
        repository should be deleted/dropped prior to performing the next
        release.</para>

        <note>
          <para>"Release candidate" version numbers (RCx) should NOT be used
          for releases, because once a release has been voted on it must not
          be altered. The corollary of this is that it IS allowed to use the
          same version number for multiple release candidates (of course, only
          the last of these will ever be promoted).</para>
        </note>

        <para>In the sections that follow, we use
        <emphasis>0.x.x-incubating</emphasis> to represent the version
        number..</para>

        <sect2 id="sec.ReleaseBranch">
          <title>Branch</title>

          <para>First, create a branch in the <acronym>SVN</acronym> repo and
          a corresponding local direcory:</para>

          <programlisting>svn mkdir https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating \
   -m "branching to create x.x.x-incubating"

cd .../trunk/framework   # your local workspace for expressive-objects/trunk/framework
cd ../..
mkdir -p branches/x.x.x-incubating</programlisting>

          <para>Then, perform an <code>svn copy</code> from trunk:</para>

          <programlisting>svn copy https://svn.apache.org/repos/asf/incubator/expressive-objects/trunk/framework \
    https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework \
    -m "copying trunk to branches/x.x.x-incubating/framework"

cp -R trunk/framework branches/x.x.x-incubating/framework</programlisting>

          <para>Finally, use <code>svn switch</code> to update your local
          directory:</para>

          <programlisting>cd branches/x.x.x-incubating/framework
svn switch https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework</programlisting>

          <para>Because the release is being performed in a branch, it is then
          necessary to edit the parent <filename>pom.xml</filename> in
          <package>[oai:expressive-objects]</package> parent module. Change
          <emphasis>trunk</emphasis> to
          <emphasis>branches/x.x.x-incubating/framework</emphasis> for each of
          the children of the <code>&lt;scm&gt;</code> element:</para>

          <programlisting>&lt;scm&gt;
  &lt;connection&gt;
    scm:svn:http://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework/
  &lt;/connection&gt;
  &lt;developerConnection&gt;
    scm:svn:https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework/
  &lt;/developerConnection&gt;
  &lt;url&gt;
    http://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework/
  &lt;/url&gt;
&lt;/scm&gt;</programlisting>

          <para>Then commit the <filename>pom.xml</filename> file.</para>
        </sect2>

        <sect2 id="sec.ManuallyUpdateVersionsToReleaseVersion">
          <title>Manually update versions to the release version</title>

          <para>There are a couple of locations where the version must be
          bumped up manually.</para>

          <sect3>
            <title>Update <code>&lt;version&gt;</code> in archetype
            resources</title>

            <para>The release plugin (used in the sections that follow) will
            automatically bump up the <code>&lt;version&gt;</code> of all of
            the <acronym>POM</acronym>s (first to remove the
            <literal>-SNAPSHOT</literal> prefix while the release is being
            cut, and then update to the next iterations
            <literal>-SNAPSHOT</literal> after that). However, what it doesn't
            do, unfortunately, is to update the
            <varname>&lt;expressive-objects.version&gt;</varname> property in the archetype
            resources for the quickstart archetype.</para>

            <para>Therefore, open up the
            <filename>src/main/resources/archetype-resources/pom.xml</filename>
            in the <package>[oai:quickstart-archetype]</package> module, and
            update the <code>&lt;expressive-objects.version&gt;</code> property:</para>

            <programlisting>&lt;properties&gt;
    &lt;expressive-objects.version&gt;0.x.x-incubating&lt;/expressive-objects.version&gt;
&lt;/properties&gt;</programlisting>

            <para>Then commit the <filename>pom.xml</filename> file.</para>
          </sect3>

          <sect3>
            <title>Update skin <code>&lt;version&gt;</code></title>

            <para>The parent module's <filename>site.xml</filename> file
            defines the skin that is used by the parent module and every
            inheriting child module. Since the Maven release process does not
            automatically increment this version, it must be updated manually
            first.</para>

            <para>Therefore, open up the
            <filename>src/site/site.xml</filename> in the
            <package>[oai:expressive-objects]</package> parent module, and update the
            <code>&lt;version&gt;</code>:</para>

            <programlisting>&lt;skin&gt;
    ...
    &lt;version&gt;0.x.x-incubating&lt;/version&gt;
&lt;/skin&gt;</programlisting>

            <para>Then commit the <filename>site.xml</filename> file.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Dry run</title>

          <para>The <code>release:prepare</code> command updates all
          <acronym>POM</acronym>s, creates a tag.</para>

          <para><note>
              <para>This command appears to fail if the (snapshot) artifacts
              have not been built with a regular <code>maven clean
              install</code>. In particular, you shouldn't manually delete
              <filename>~/.m2/repository/uk.co.objectconnexions.expressiveobjects</filename> directory
              beforehand (a practice sometimes done in order to "start from
              scratch").</para>
            </note></para>

          <para>It's common practice to perform a dry run first:</para>

          <programlisting>mvn release:prepare -P apache-release,integration-tests -D dryRun=true</programlisting>

          <note>
            <para>The <code>-P integration-tests</code> flag is required in
            order to include the
            <package>[oai.objectstore:expressive-objects-objectstore-sql-tests-served]</package>.</para>
          </note>

          <para>This should generate the following prompt:</para>

          <programlisting>...
[INFO] ------------------------------------------------------------------------
[INFO] Building Expressive Objects
[INFO]    task-segment: [release:clean, release:prepare] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [release:clean {execution: default-cli}]
[INFO] Cleaning up after release...
[INFO] [release:prepare {execution: default-cli}]
[INFO] Verifying that there are no local modifications...
[INFO]   ignoring changes on: pom.xml.next, release.properties, pom.xml.releaseBackup, 
         pom.xml.backup, pom.xml.branch, pom.xml.tag
[INFO] Executing: cmd.exe /X /C "svn --non-interactive status"
[INFO] Working directory: /users/uuuuuuuu/branches/0.x.x-incubating/framework
[INFO] Checking dependencies and plugins for snapshots ...
What is the release version for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) 0.n.n-incubating: : </programlisting>

          <para>Then:</para>

          <itemizedlist>
            <listitem>
              <para>leave the release version as its default
              <emphasis>0.x.x-incubating</emphasis>:</para>

              <programlisting>What is the release version for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) 0.x.x-incubating: </programlisting>
            </listitem>

            <listitem>
              <para>leave the <acronym>SCM</acronym> release tag as its
              default:</para>

              <programlisting>What is SCM release tag or label for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) expressive-objects-0.x.x-incubating: </programlisting>
            </listitem>

            <listitem>
              <para>enter the new development version, specifying the
              <literal>-SNAPSHOT</literal> of the next version expected for
              development.</para>

              <programlisting>What is the new development version for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) 0.x.x-incubating-SNAPSHOT: : 0.y.0-incubating-SNAPSHOT</programlisting>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2 id="sec.ReleaseProper">
          <title>Release Proper</title>

          <para>Assuming that the dry run has succeeded, it's time to create
          the release proper.</para>

          <para>First up, clean up any release artifacts.</para>

          <programlisting>mvn release:clean -P integration-tests</programlisting>

          <note>
            <para>The <code>-P integration-tests</code> flag is required in
            order to include the
            <package>[oai.objectstore:expressive-objects-objectstore-sql-tests-served]</package>.</para>
          </note>

          <para>Then, run the prepare step (skipping tests will reduce the
          elapsed time):</para>

          <programlisting>mvn release:prepare -P apache-release,integration-tests -D skipTests=true -D resume=false </programlisting>

          <note>
            <para>Again, the <code>-P integration-tests</code> flag is
            required in order to include the
            <package>[oai.objectstore:expressive-objects-objectstore-sql-tests-served]</package>.</para>
          </note>

          <note>
            <para>The <code>-D resume=false</code> flag is required because
            (at least on one occasion) the plugin seemed to consider the
            prepare goal to already have been performed even though only a
            <code>dryRun</code> was performed. It's possible that the <code>-P
            integration-tests</code> profile caused this.</para>
          </note>

          <para>Then:</para>

          <itemizedlist>
            <listitem>
              <para>leave the release version as its default,
              <emphasis>0.x.x-incubating</emphasis>:</para>

              <programlisting>What is the release version for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) 0.x.x-incubating:</programlisting>
            </listitem>

            <listitem>
              <para>leave the <acronym>SCM</acronym> release tag as the
              default:</para>

              <programlisting>What is SCM release tag or label for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) expressive-objects-0.x.x-incubating: </programlisting>
            </listitem>

            <listitem>
              <para>the new development version, specifying the
              <literal>-SNAPSHOT</literal> of the next version expected for
              development.</para>

              <programlisting>What is the new development version for "Expressive Objects"? (uk.co.objectconnexions.expressiveobjects:expressive-objects) 0.x.x-incubating-SNAPSHOT: : 0.y.0-incubating-SNAPSHOT</programlisting>
            </listitem>
          </itemizedlist>

          <para>If you are running outside the US, then the <code>mvn
          release:prepare</code> command almost always fails at the last step,
          with a message like:</para>

          <programlisting>[INFO] Checking in modified POMs...
[INFO] Executing: cmd.exe /X /C "svn --non-interactive 
       commit --file /users/uuuuuuuu/maven-scm-1762417972.commit --targets /tmp/maven-scm-5153433587636484699-targets"
[INFO] Working directory: /users/uuuuuuuu/branches/0.x.x-incubating/framework
[INFO] Tagging release with the label expressive-objects-0.x.x-incubating...
[INFO] Executing: cmd.exe /X /C "svn --non-interactive copy --file /tmp/maven-scm-259416193.commit --revision 1234567 
       https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/framework/ 
       https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/x.x.x-incubating/tags/expressive-objects-0.x.x-incubating"
[INFO] Working directory: /users/uuuuuuuu/branches/0.x.x-incubating/framework
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO]
 ------------------------------------------------------------------------
[INFO]
Unable to tag SCM
Provider message:
The svn tag command failed.
Command output:
svn: No such revision 1126567</programlisting>

          <para>This is due to the <acronym>SVN</acronym> mirroring in place
          between Europe and the master in the US. When you make a commit, it
          isn't immediately available in Europe to svn up to. If this is
          occurs, then:</para>

          <itemizedlist>
            <listitem>
              <para>wait 10 secs ;-)</para>
            </listitem>

            <listitem>
              <para>repeat the mvn release:prepare command, but using <code>-D
              resume=true</code> flag so things can restart:</para>

              <programlisting>mvn release:prepare -P apache-release,integration-tests -D skipTests=true -D resume=true</programlisting>

              <note>
                <para>Do NOT use <code>release:clean</code> goal in this
                command, otherwise it will not be possible to perform the
                resume!</para>
              </note>
            </listitem>
          </itemizedlist>

          <note>
            <para>The configuration for the maven-release-plugin in the parent
            <code>pom.xml</code> now uses the waitBeforeTagging setting to
            wait a while; hopefully this error will be less commonplace in the
            future.</para>
          </note>

          <para>On the other hand, if things go wrong before the tagging, then
          <code>mvn release:clean</code> will do most of the cleaning up in
          the event of failures.</para>
        </sect2>

        <sect2 id="sec.ReleasePostPrepareSanityCheck">
          <title>Post-prepare sanity check</title>

          <para>You should end up with artifacts in your local repo with the
          new version <emphasis>0.x.x-incubating</emphasis>. There are then a
          couple of sanity checks that you can perform:</para>

          <itemizedlist>
            <listitem>
              <para>unzip the source-release <acronym>ZIP</acronym> and check
              it builds</para>

              <para>The <acronym>ZIP</acronym> file is called
              <filename>expressive-objects-0.x.x-incubating-source-release.zip</filename>
              and should reside in
              <filename>~/.m2/repository/uk.co.objectconnexions.expressiveobjects/expressive-objects/0.x.x-incubating</filename>
              directory. Unzip in a new directory, and build (see <xref
              linkend="chp.BuildingExpressiveObjectsFromSource" />).</para>
            </listitem>

            <listitem>
              <para>Inspect the <filename>DEPENDENCIES</filename> file.</para>

              <para>This should be in the root of the extracted
              <acronym>ZIP</acronym>. In particular, check that there are no
              <ulink
              url="http://www.apache.org/legal/resolved.html#category-x">category-x</ulink>
              dependencies.</para>
            </listitem>

            <listitem>
              <para>Use the locally built quickstart archetype to generate the
              application, and make sure that the generated application runs
              ok.</para>

              <programlisting>mvn archetype:generate  \
    -D groupId=com.mycompany \
    -D artifactId=myapp \
    -D archetypeCatalog=local \
    -D archetypeGroupId=uk.co.objectconnexions.expressiveobjects \
    -D archetypeArtifactId=quickstart-archetype \
    -D archetypeVersion=0.x.x-incubating</programlisting>

              <para>Check that the generated app's artifacts point to the
              correct version of <emphasis>ExpressiveObjects</emphasis> (specifically:
              without a <literal>-SNAPSHOT</literal> suffix), and runs as
              expected.</para>
            </listitem>
          </itemizedlist>

          <para>If you find problems and the release was performed on a
          branch, then just delete the branch and start over.</para>

          <para>If you find problems and the release was performed on trunk
          then you may need to revert the changes. The release commands make
          and commit changes to the project's <filename>pom.xml</filename>
          files and they create a tag in <acronym>SVN</acronym>; you'll need
          to revert the <filename>pom.xml</filename> files and delete the tag
          from <acronym>SVN</acronym>.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.UploadReleaseForVoting">
        <title>Upload Release for Voting</title>

        <para>Once the release has been built locally, it should be uploaded
        for voting. This is done by deploying the Maven artifacts to a staging
        directory (this includes the source release <acronym>ZIP</acronym>
        file which will be voted upon).</para>

        <para>The Apache staging repository lives on the Nexus repository
        hosted at <ulink
        url="https://repository.apache.org">https://repository.apache.org</ulink>.
        The process of uploading will create a staging repository that is
        associated with the host (IP address) performing the release. Once the
        repository is staged, the newly created staging repository is "closed"
        in order to make it available to others.</para>

        <sect2>
          <title>Perform the Release</title>

          <para>The command to stage the release (assuming that
          <filename>release.properties</filename> is still available in the
          root directory) is:</para>

          <programlisting>mvn release:perform -P apache-release</programlisting>

          <para>If, for any reason, the
          <filename>release.properties</filename> file is not available, the
          release can still be performed using:</para>

          <programlisting>mvn release:perform -P apache-release \
    -D connectionUrl=scm:svn:http://svn.apache.org/repos/asf/incubator/expressive-objects/tags/expressive-objects-0.x.x-incubating/framework</programlisting>

          <para>The command starts off by checking out the codebase from the
          tag:</para>

          <programlisting>[INFO] [release:perform {execution: default-cli}]
[INFO] Checking out the project to perform the release ...
[INFO] Executing: cmd.exe /X /C 
       "svn --non-interactive checkout https://svn.apache.org/repos/asf/incubator/expressive-objects/tags/expressive-objects-0.x.x-incubating/framework 
        /users/uuuuuuuu/ai/branches/0.x.x-incubating/framework/target/checkout"
[INFO] Working directory: /users/uuuuuuuu/ai/branches/0.x.x-incubating/framework/target/
...</programlisting>

          <para>All being well this command will complete successfully:</para>

          <programlisting>...
[INFO] [INFO] BUILD SUCCESSFUL
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] Total time: 17 minutes 19 seconds
[INFO] [INFO] Finished at: Wed May 25 07:42:05 BST 2011
[INFO] [INFO] Final Memory: 431M/811M
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] Cleaning up after release...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 20 minutes 25 seconds
[INFO] Finished at: Wed May 25 07:42:07 BST 2011
[INFO] Final Memory: 45M/991M
[INFO] ------------------------------------------------------------------------</programlisting>
        </sect2>

        <sect2>
          <title>Check the Repository</title>

          <para>If the <code>mvn release:perform</code> has worked then it
          will have put release artifacts into a newly created staging
          repository .</para>

          <para>Log onto <ulink
          url="http://repository.apache.org">http://repository.apache.org</ulink>
          (using your ASF LDAP account) and check that the release has been
          staged:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/release/nexus-staging-1.png"
                         scale="55" />
            </imageobject>
          </mediaobject>

          <para>If nothing appears in a staging repo you should stop here and
          work out why.</para>

          <para>Assuming that the repo has been populated, make a note of its
          repo id; this is needed for the voting thread (see <xref
          linkend="sec.VotingThread" />). In the screenshot above the id is
          <emphasis>uk.co.objectconnexions.expressiveobjects-008</emphasis>.</para>
        </sect2>

        <sect2>
          <title>Close the Repository</title>

          <para>After checking that the staging repository contains the
          artifacts that you expect you should close the staging repository.
          This will make it available so that people can check the
          release.</para>

          <para>Press the Close button and complete the dialog:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/release/nexus-staging-2.png"
                         scale="55" />
            </imageobject>
          </mediaobject>

          <para>All being well, the close should complete successfully:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/release/nexus-staging-3.png"
                         scale="55" />
            </imageobject>
          </mediaobject>

          <para>The Nexus repository manager will also email you with
          confirmation of a successful close.</para>

          <para>If Nexus has problems with the key signature, however, then
          the close will be aborted:</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/release/nexus-staging-4.png"
                         scale="55" />
            </imageobject>
          </mediaobject>

          <para>Use <code>gpg --keyserver hkp://pgp.mit.edu --recv-keys
          nnnnnnnn</code> to confirm that the key is available.</para>

          <note>
            <para>Unfortunately, Nexus does not seem to allow subkeys to be
            used for signing. See <xref linkend="apx.KeyGeneration" /> for
            more details.</para>
          </note>
        </sect2>

        <sect2 id="sec.StageTheWebsite">
          <title>Stage the Website</title>

          <para>The release process above will result in a branch workspace
          set to 0.x.y-incubating-SNAPSHOT, in readiness for the next release.
          It therefore isn't correct to build the website from the branch
          workspace: the version numbers will be incorrect.</para>

          <para>Instead, go to the directory where you unzipped and checked
          the source <acronym>ZIP</acronym> (see <xref
          linkend="sec.ReleasePostPrepareSanityCheck" />), and build the site
          from there. The steps for building the site are documented in <xref
          linkend="sec.BuildingSiteAndDocs" />; it should generate the current
          site in <filename>/tmp/m2-sites/expressive-objects</filename>.</para>

          <para>To make the site accessible from the web, first upload the
          site (as a <acronym>ZIP</acronym>) to your local account on
          <code>people.apache.org</code>:</para>

          <itemizedlist>
            <listitem>
              <para>cd <filename>/tmp/m2-sites</filename></para>
            </listitem>

            <listitem>
              <para>zip up expressive-objects to <filename>expressive-objects.zip</filename></para>
            </listitem>

            <listitem>
              <para>scp the <filename>expressive-objects.zip</filename> to
              <filename>people.apache.org/~</filename></para>
            </listitem>

            <listitem>
              <para>login to <code>people.apache.org</code> using ssh:</para>

              <programlisting>$ ssh -l xxxxxxxx people.apache.org</programlisting>

              <para>where xxxxxxx is your apache user Id</para>
            </listitem>

            <listitem>
              <para>unzip <filename>expressive-objects.zip</filename></para>

              <para>This should leave you with the same directory, expressive-objects, as
              was previously in /tmp/m2-sites.</para>
            </listitem>
          </itemizedlist>

          <para>Then, copy the exploded <acronym>ZIP</acronym> into
          /www/incubator.apache.org/content:</para>

          <itemizedlist>
            <listitem>
              <para>Switch to the destination directory:</para>

              <programlisting>$ cd /www/incubator.apache.org/content</programlisting>
            </listitem>

            <listitem>
              <para>move the new site into the distribution location:</para>

              <programlisting>$ mv ~/expressive-objects expressive-objects-0.x.x-incubating</programlisting>

              <para>where <emphasis>0.x.x</emphasis> should be replaced with
              the appropriate version number, eg 0.2.0 or 0.3.0, etc.</para>
            </listitem>

            <listitem>
              <para>make the new site readable by all:</para>

              <programlisting>$ chmod -R g+w expressive-objects-0.x.x-incubating
$ chgrp -R incubator expressive-objects-0.x.x-incubating
$ for a in `find expressive-objects-0.x.x-incubating -type d -print` ; do chmod g+s $a ; done</programlisting>
            </listitem>
          </itemizedlist>

          <para>In a couple of hours this site will be distributed and
          available, allowing it to be referenced from the vote email (<xref
          linkend="sec.Voting" />).</para>
        </sect2>
      </sect1>

      <sect1 id="sec.Voting">
        <title>Voting</title>

        <para>Once the artifacts have been uploaded, you can call a
        vote.</para>

        <para>While incubating, this vote should be performed on the
        expressive-objects-dev@incubator.apache.org mailing list, and then repeated on the
        incubator@apache.org mailing list.</para>

        <para>In all cases, votes last for 72 hours and require a +3 (binding)
        vote from members.</para>

        <sect2 id="sec.VotingThread">
          <title>Start voting thread on expressive-objects-dev@incubator.a.o</title>

          <para>You can use the following boilerplate for the vote on
          expressive-objects-dev.</para>

          <para>Use the following subject:</para>

          <programlisting>[VOTE] Expressive Objects release 0.x.x-incubating</programlisting>

          <para>And use the following body:</para>

          <programlisting>I've staged a release for Expressive Objects, namely 0.x.x-incubating.

The artifacts have been staged to staging repository on repository.apache.org:
* https://repository.apache.org/content/repositories/orgapacheexpressive-objects-zzz/uk.co.objectconnexions.expressiveobjects/expressive-objects/0.x.x-incubating/expressive-objects-0.x.x-incubating-source-release.zip (zip file)
* https://repository.apache.org/content/repositories/orgapacheexpressive-objects-zzz/uk.co.objectconnexions.expressiveobjects/expressive-objects/0.x.x-incubating/expressive-objects-0.x.x-incubating-source-release.zip.asc (signature)

In Subversion the code has been tagged as tags/expressive-objects-0.x.x-incubating.

I've also uploaded a new version of the site at http://incubator.apache.org/expressive-objects-0.x.x-incubating.  
The contributors guide on the site contains some suggestions of how to verify the release, see
http://incubator.apache.org/expressive-objects-0.x.x-incubating/docbkx/html/guide/ch12.html

Please verify the release and cast your vote.  The vote will be open for 72 hours.

[ ] +1
[ ]  0
[ ] -1</programlisting>

          <para>where:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>zzz</emphasis> is the newly created staging
              repository, from above.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Other contributors cast their vote</title>

          <para>It is the responsibility of other contributors (or any
          <acronym>ASF</acronym> member) to cast their vote on the release.
          This section provides some guidance on this process.</para>

          <sect3>
            <title>Verifying the source release artifacts</title>

            <para>Download both the <acronym>ZIP</acronym> and
            <acronym>.ASC</acronym> files from the location specified in the
            voting email. To verify that the signature is correct, use:</para>

            <programlisting>gpg --verify expressive-objects-x.x.x-incubating.zip.asc expressive-objects-x.x.x-incubating.zip</programlisting>

            <para>The <acronym>ZIP</acronym> file should then be
            unpacked.</para>

            <para>Once unpacked, it is recommended that voters at a minimum
            sanity check the contents, as per <xref
            linkend="sec.SanityCheck" />.</para>

            <para>In particular, when building locally, confirm that the
            versions in your local repository
            (<filename>~/.m2/repository/uk.co.objectconnexions.expressiveobjects</filename>) are
            correct.</para>
          </sect3>

          <sect3>
            <title>Verifying the binary release artifacts</title>

            <para>Optionally, voters can verify the binary releases (in the
            Maven staging repository). For this it is necessary to download
            each artifact from Nexus and its corresponding .ASC file. Since
            there are many such artifacts, we suggest you just choose one or
            two at random.</para>
          </sect3>

          <sect3>
            <title>Casting a Vote</title>

            <para>When the above checks have been made (and any other checks
            that the voter thinks is relevant), they should cast a vote by
            replying to the email thread above.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>After the expressive-objects-dev vote</title>

          <para>Once the vote has completed, post the results to the expressive-objects-dev
          mailing list.</para>

          <para>Use the following subject:</para>

          <programlisting>[RESULT] [VOTE] Expressive Objects release 0.x.x-incubating</programlisting>

          <para>with the body:</para>

          <programlisting>The vote has completed with the following result :

  +1 (binding): &lt;&lt;list of names&gt;&gt;
  +1 (non binding): &lt;&lt;list of names&gt;&gt;</programlisting>

          <para>Optionally, include a paragraph at the end to describe the
          next steps, for example:</para>

          <programlisting>I will now submit the release for voting on the general@incubator.a.o.</programlisting>

          <para>If the vote has been unsuccessful, then delete the branches
          and <acronym>SVN</acronym> tag, drop the staging repository, address
          the problems in trunk, and go again.</para>
        </sect2>

        <sect2>
          <title>Start voting thread on general@incubator.a.o</title>

          <para>Once the vote has been approved on expressive-objects-dev, then the release
          process should be performed again on
          general@incubator.apache.org.</para>

          <para>Use the following subject:</para>

          <programlisting>[VOTE] Expressive Objects release 0.x.x-incubating</programlisting>

          <para>And use the following body:</para>

          <programlisting>I've staged a release for Expressive Objects, namely 0.x.x-incubating.  This has been voted through on the expressive-objects-dev@incubator.a.o mailing list, and
now requires a vote on general@incubator.a.o

Votes already cast (on expressive-objects-dev):

  +1 (binding): &lt;&lt;list of names&gt;&gt;
  +1 (non binding): &lt;&lt;list of names&gt;&gt;

The artifacts have been staged to staging repository on repository.apache.org:
* https://repository.apache.org/content/repositories/orgapacheexpressive-objects-zzz/uk.co.objectconnexions.expressiveobjects/expressive-objects/0.x.x-incubating/expressive-objects-0.x.x-incubating-source-release.zip (zip file)
* https://repository.apache.org/content/repositories/orgapacheexpressive-objects-zzz/uk.co.objectconnexions.expressiveobjects/expressive-objects/0.x.x-incubating/expressive-objects-0.x.x-incubating-source-release.zip.asc (signature)

In Subversion the code has been tagged as tags/0.x.x-incubating.

I've also uploaded a new version of the site at http://incubator.apache.org/expressive-objects-0.x.x-incubating.  The contributors guide on the site contains some suggestions of how to verify the release, see
http://incubator.apache.org/expressive-objects-0.x.x-incubating/docbkx/html/guide/ch12.html

Please verify the release and cast your vote.  The vote will be open for 72 hours.

[ ] +1
[ ]  0
[ ] -1</programlisting>

          <para>where:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>zzz</emphasis> is the newly created staging
              repository, from above.</para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Post the result to the general@incubator.a.o list</title>

          <para>Once the incubator vote has completed, post the results to the
          general@incubator.a.o mailing list.</para>

          <para>Use the following subject:</para>

          <programlisting>[RESULT] [VOTE] Expressive Objects release 0.x.x-incubating</programlisting>

          <para>with the body:</para>

          <programlisting>The vote has completed with the following result :

  +1 (binding): &lt;&lt;list of names&gt;&gt;
  +1 (non binding): &lt;&lt;list of names&gt;&gt;</programlisting>

          <para>If the vote has been successful, include a paragraph at the
          end to describe the next steps, for example:</para>

          <programlisting>I will now copy this release to ExpressiveObjects' dist directory and promote the artifacts to the central Maven repository.</programlisting>

          <para>At this stage the release can be promoted for distribution
          (see <xref linkend="sec.PromotingReleaseToDistribution" />).</para>

          <para>If the vote has been unsuccessful, then delete the branches
          and <acronym>SVN</acronym> tag, drop the staging repository, address
          the problems in trunk, and go again.</para>
        </sect2>
      </sect1>

      <sect1 id="sec.PromotingReleaseToDistribution">
        <title>Promoting Release to Distribution</title>

        <sect2>
          <title>Release Binaries to Maven Central Repo</title>

          <para>From the <ulink
          url="https://repository.apache.org/index.html#stagingRepositories">Nexus
          pages</ulink>, select the staging repository and select 'release'
          from the top menu.</para>

          <para>This moves the release artifacts into an Apache releases
          repository, from there they will be automatically moved to the Maven
          repository.</para>
        </sect2>

        <sect2>
          <title>Release Source Zip</title>

          <para>Releasing the source <acronym>ZIP</acronym> is a matter of
          copying the <acronym>ZIP</acronym> into the
          <filename>/www/www.apache.org/dist/incubator/expressive-objects</filename>
          directory on <emphasis>people.apache.org</emphasis>.</para>

          <note>
            <para>There is an alternative and newer approach, namely to check
            in the release to subversion. At some stage these procedures will
            be updated to reflcet this newer approach.</para>
          </note>

          <para>Assuming you've downloaded the <acronym>ZIP</acronym> file and
          signature file from the staging repo, and the dist directory already
          exists, use scp to copy the files up:</para>

          <programlisting>scp expressive-objects-x.x.x-incubating-source-release.* people.apache.org:/www/www.apache.org/dist/incubator/expressive-objects/x.x.x-incubating/.</programlisting>

          <para>Then, ssh onto people.apache.org and confirm the permissions
          are set correctly:</para>

          <programlisting>ssh people.apache.org
cd /www/www.apache.org/dist/incubator/expressive-objects/x.x.x-incubating/
chmod 644 *</programlisting>
        </sect2>

        <sect2 id="sec.PromoteAndUpdateWebsite">
          <title>Promote and update the Website</title>

          <para>To promote the site, first log onto people.apache.org.
          Then:</para>

          <itemizedlist>
            <listitem>
              <para>switch to the website directory:</para>

              <programlisting>$ cd /www/incubator.apache.org</programlisting>
            </listitem>

            <listitem>
              <para>Either:</para>

              <itemizedlist>
                <listitem>
                  <para>move the previous site to one side:</para>

                  <programlisting>$ mv expressive-objects expressive-objects-0.x.w-incubating</programlisting>

                  <para>where <emphasis>0.x.w</emphasis> is the previous
                  version was uploaded</para>
                </listitem>

                <listitem>
                  <para>or simply delete the site:</para>

                  <programlisting>$ rm -rf expressive-objects</programlisting>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Move the new site into place, and for good measure touch
              every file to ensure it is picked up:</para>

              <programlisting>$ mv expressive-objects-0.x.x-incubating expressive-objects
$ find expressive-objects -exec touch {} \;</programlisting>
            </listitem>
          </itemizedlist>

          <para>Finally, check that the download links are valid, as specified
          in <filename>downloads.html</filename>. If there are any errors or
          adjustments, make them directly, but remember to apply the same
          changes back to the source tree for the next iteration.</para>

          <para>The new site should become available within a couple of
          hours.</para>
        </sect2>

        <sect2>
          <title>Announce the release</title>

          <para>Announce the release to the
          <emphasis>expressive-objects-users@incubator.a.o</emphasis> and
          <emphasis>expressive-objects-dev@incubator.a.o</emphasis> mailing lists.</para>

          <para>Use the following subject:</para>

          <programlisting>Subject: [ANN] Expressive Objects version 0.x.x-incubating Released</programlisting>

          <para>And use the following body (summarizing the main points as
          required):</para>

          <programlisting>The Expressive Objects team is pleased to announce the release of Expressive Objects version 0.x.x-incubating

  http://incubator.apache.org/expressive-objects

&lt;&lt;summary of the main points of the release&gt;&gt;

Full release notes are available at [1] on the Expressive Objects website.

You can access this release directly from the Maven central repo [2], use the Maven archetype to configure an initial project [3],
or download the release and build it from source [4].

Enjoy!

-The Expressive Objects team

[1] http://incubator.apache.org/expressive-objects/release-notes-0.x.x-incubating.html
[2] http://search.maven.org
[3] http://incubator.apache.org/expressive-objects/quickstart-app.html
[4] http://incubator.apache.org/expressive-objects/downloads.html</programlisting>
        </sect2>
      </sect1>

      <sect1 id="sec.ManuallyDeployReleaseSite">
        <title>Prepare for next iteration</title>

        <sect2>
          <title>Merge changes from branch back into trunk</title>

          <para>Because we release from a branch, the changes made in the
          branch (changes to <filename>pom.xml</filename> made automatically
          by the release-plugin, or any manual edits) should be merged back
          from the release branch back into trunk. There are two ways to do
          this:</para>

          <itemizedlist>
            <listitem>
              <para>The "official" way is to use <acronym>SVN</acronym>'s
              <code>merge</code> command for this (using the "reintegrate"
              flag):</para>

              <programlisting>$ cd .../trunk/framework
$ svn merge --reintegrate https://svn.apache.org/repos/asf/incubator/expressive-objects/branches/0.x.x-incubating/framework .
$ svn commit -m "reintegrating release branch 0.x.x-incubating ready for next iteration"</programlisting>

              <para>However, you will find that this is very slow (the merge
              command alone takes something like ~1 hour) and will generate a
              massive change set which also will take an age to commit.</para>
            </listitem>

            <listitem>
              <para>Alternatively, then, you may well find it easy to perform
              the edits manually:<itemizedlist>
                  <listitem>
                    <para>one option is to use a directory comparison tool
                    such as <emphasis>Beyond Compare</emphasis> or
                    <emphasis>WinMerge</emphasis> to compare the branch
                    workspace with the trunk workspace.</para>

                    <para>Set the tool's filters to compare only
                    <filename>pom.xml</filename> files, because these are the
                    only files that the release process in the branch will
                    have updated and require merging in.</para>
                  </listitem>

                  <listitem>
                    <para>or, you could use UNIX command line tools to perform
                    an update.</para>

                    <para>The following command will locate every pom.xml and
                    perform in place updates, saving the original file to
                    pom.xml.bak:</para>

                    <programlisting>find . -name pom.xml -exec sed -i.bak -e 's/0\.1\.0/0\.2\.0/g' {} \;</programlisting>

                    <para>The above works on Cygwin, too (though you may need
                    to fully qualified the <filename>find</filename> command
                    as <filename>/usr/bin/find</filename>).</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist>
        </sect2>

        <sect2>
          <title>Manually update versions to snapshot versions</title>

          <para>After the release there are a couple of locations where the
          version must be bumped up manually to the next
          <acronym>SNAPSHOT</acronym> version.</para>

          <sect3>
            <title>Update <code>&lt;version&gt;</code> in archetype
            resources</title>

            <para>Open up the
            <filename>src/main/resources/archetype-resources/pom.xml</filename>
            in the <package>[oai:quickstart-archetype]</package> module, and
            update the <code>&lt;expressive-objects.version&gt;</code> property:</para>

            <programlisting>&lt;properties&gt;
    &lt;expressive-objects.version&gt;0.x.y-incubating-SNAPSHOT&lt;/expressive-objects.version&gt;
&lt;/properties&gt;</programlisting>

            <para>Then commit the <filename>pom.xml</filename> file.</para>
          </sect3>

          <sect3>
            <title>Update skin <code>&lt;version&gt;</code></title>

            <para>Open up the <filename>src/site/site.xml</filename> in the
            <package>[oai:expressive-objects]</package> parent module, and update the
            <code>&lt;version&gt;</code>:</para>

            <programlisting>&lt;skin&gt;
    ...
    &lt;version&gt;0.x.y-incubating-SNAPSHOT&lt;/version&gt;
&lt;/skin&gt;</programlisting>

            <para>Then commit the <filename>site.xml</filename> file.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Update examples etc (source code outside of
          trunk/framework)</title>

          <para>Finally, remember that the version in the
          <filename>pom.xml</filename> for any modules that are not in the
          release - specifically those outside of
          <filename>trunk/framework</filename>, such as the
          <filename>examples</filename> and <filename>domain-libs</filename>
          modules - should be manually updated also.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Update Expressive Objects Project Incubation Status page</title>

        <para>Update the <ulink
        url="http://incubator.apache.org/projects/expressive-objects.html">Expressive Objects Project
        Incubation Status</ulink> page to capture the new status of the
        project. In particular:</para>

        <itemizedlist>
          <listitem>
            <para>The <emphasis>News</emphasis> section should document the
            new release</para>
          </listitem>

          <listitem>
            <para>The <emphasis>Project Info</emphasis> section should be
            reviewed and updated if required</para>
          </listitem>

          <listitem>
            <para>Any links to missing <emphasis>Incubation status</emphasis>
            reports should be added</para>
          </listitem>
        </itemizedlist>

        <para>The file is updated by checking out and editing the following
        file from SVN:</para>

        <itemizedlist>
          <listitem>
            <para><ulink
            url="https://svn.apache.org/repos/asf/incubator/public/trunk/site-author/projects/expressive-objects.xml">https://svn.apache.org/repos/asf/incubator/public/trunk/site-author/projects/expressive-objects.xml</ulink></para>
          </listitem>
        </itemizedlist>

        <para>For additional information, see this <ulink
        url="http://incubator.apache.org/guides/website.html">guidance</ulink>
        on the incubator website.</para>
      </sect1>
    </chapter>

    <appendix id="apx.KeyGeneration">
      <title>Key Generation</title>

      <abstract>
        <para>How to generate keys and subkeys in order to sign a
        release.</para>
      </abstract>

      <para>In order that a contributor can make a release it is necessary for
      them to have generated a key and had that key recognized by other
      members of the Apache Software Foundation. This appendix describes the
      steps involved. For further background information on this topic, see
      the <ulink url="http://www.apache.org/dev/release-signing.html">release
      signing page</ulink> and the <ulink
      url="http://www.apache.org/dev/openpgp.html#generate-key">openpgp
      page</ulink> on the Apache wiki.</para>

      <sect1>
        <title>Install and Configure gpg</title>

        <para>Download and install GnuPG (gpg), version 1.4.10 or
        higher.</para>

        <para>Then, edit <filename>~/.gnupg/gpg.conf</filename> (on Windows,
        the file to edit is
        <filename>C:\Users\xxx\AppData\Roaming\gnupg\gpg.conf</filename>) so
        that the default is to generate a strong key:</para>

        <programlisting>{code}
personal-digest-preferences SHA512
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
{code}</programlisting>
      </sect1>

      <sect1>
        <title>Key Generation</title>

        <para>The ASF requires that keys are signed with a key (or subkey)
        based on RSA 4096 bits. To do this:</para>

        <programlisting>$ gpg --gen-key
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?</programlisting>

        <para>Specify RSA key:</para>

        <programlisting>Your selection? 1

RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)</programlisting>

        <para>Specify key length as 4096 bits:</para>

        <programlisting>What keysize do you want? (2048) 4096
Requested keysize is 4096 bits

Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)</programlisting>

        <para>Specify key as non-expiring:</para>

        <programlisting>Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
    "Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;"

Real name: </programlisting>

        <para>Enter your name, email and comment:</para>

        <itemizedlist>
          <listitem>
            <para>use your apache.org email</para>
          </listitem>

          <listitem>
            <para>the comment should be "CODE SIGNING KEY"</para>
          </listitem>
        </itemizedlist>

        <programlisting>Real name: Xxx Xxxxxxxxx
Email address: &lt;xxx@apache.org&gt;
Comment: CODE SIGNING KEY
You selected this USER-ID:
    "Xxx Xxxxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O

You need a Passphrase to protect your secret key.
Enter passphrase:</programlisting>

        <para>Provide a passphrase to secure your key.</para>

        <programlisting>Enter passphrase:
Repeat passphrase:</programlisting>

        <para>GPG will goes on to generate your key:</para>

        <programlisting>We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
...+++++
.........................+++++
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
....+++++
...+++++
gpg: key nnnnnnnn marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   4096R/nnnnnnnn yyyy-mm-dd
      Key fingerprint = xxxx xxxx xxxx xxxx xxxx  xxxx xxxx xxxx xxxx xxxx
uid                  Xxx Xxxxxx &lt;xxx@apache.org&gt;
sub   4096R/kkkkkkkk yyyy-mm-dd</programlisting>

        <para>The public key with id nnnnnnnn should now be stored in
        <filename>~/.gnupg/pubring.pgp</filename> (on Windows 7, this is in
        c<filename>:/Users/xxx/AppData/Roaming/gnupg/pubring.pgp</filename>).</para>

        <para>To confirm the key has been generated, use:</para>

        <programlisting>$ gpg --list-keys --fingerprint</programlisting>

        <para>The key Id is the one true way to identify the key, and is also
        the last 8 digits of the fingerprint. The corresponding secret key for
        id nnnnnnnn is stored in <filename>~/.gnupg/secring.pgp</filename> (on
        Windows 7, this is in
        <filename>c:/Users/xxx/AppData/Roaming/gnupg/secring.pgp</filename>).</para>

        <para>It's also worth confirming the key has the correct preference of
        algorithms (reflecting the initial configuration we did earlier). For
        this, enter the gpg shell for your new key:</para>

        <para><programlisting>$ gpg --edit-key nnnnnnnnn
gpg&gt;</programlisting>where nnnnnnnn is your key id. Now, use the 'showpref'
        subcommand to list details:</para>

        <programlisting>gpg&gt; showpref
[ultimate] (1). Xxx Xxxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;
     Cipher: AES256, AES192, AES, CAST5, 3DES
     Digest: SHA512, SHA384, SHA256, SHA224, SHA1
     Compression: ZLIB, BZIP2, ZIP, Uncompressed
     Features: MDC, Keyserver no-modify

gpg&gt;</programlisting>

        <para>The Digest line should list SHA-512 first and SHA-1 last.</para>

        <para>Finally, remember to take a backup of your key and the keyring
        (ie, backup the <filename>.gnupg</filename> directory and its
        contents).</para>
      </sect1>

      <sect1>
        <title>Subkey Generation</title>

        <para>It's recommended to use a subkey with an expiry date to sign
        releases, rather than your main, non-expiring key. If a subkey is
        present, then gpg will use it for signing in preference to the main
        key.</para>

        <note>
          <para>After (binary) release artifacts are created, they are
          deployed to the ASF's Nexus staging repository. However, Nexus seems
          unable to retrieve a subkey from the public key server. Until we
          find a fix/workaround for this, all releases should be signed just
          with a regular non-expiring main key.</para>
        </note>

        <para>To create a subkey Enter the gpg shell using (the identifier of)
        your main key:</para>

        <programlisting>gpg --edit-key xxxxxxxx
gpg&gt;</programlisting>

        <para>Type 'addkey' to create a subkey, and enter your passphrase for
        the main key:</para>

        <para><programlisting>gpg&gt; addkey
Key is protected.
[enter your secret passphrase]

You need a passphrase to unlock the secret key for
user: "Dan Haywood (CODE SIGNING KEY) &lt;danhaywood@apache.org&gt;"
4096-bit RSA key, ID xxxxxxxx, created 2011-02-01

Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
Your selection?</programlisting></para>

        <para>Select (6) to choose an RSA key for encryption:</para>

        <note>
          <para>It would seem that Nexus repository manager does not recognize
          RSA subkeys with an 'S'ign usage; see <ulink
          url="http://permalink.gmane.org/gmane.comp.java.tynamo.devel/203">this
          discussion</ulink> on a mailing list and <ulink
          url="https://issues.sonatype.org/browse/OSSRH-1525">this
          issue</ulink> on Sonatype's JIRA</para>
        </note>

        <programlisting>Your selection? 6

RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096

Requested keysize is 4096 bits

Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for?</programlisting>

        <para>Specify that the key is valid for 1 year:</para>

        <programlisting>Key is valid for? (0) 1y

Key expires at yy/MM/dd hh:mm:ss
Is this correct? (y/N) y
Really create? (y/N) y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
...+++++
.+++++

pub  4096R/xxxxxxxx  created: yyyy-mm-dd  expires: never       usage: SC
                     trust: ultimate      validity: ultimate
sub  4096R/xxxxxxxx  created: yyyy-mm-dd  expires: yyYY-mm-dd  usage: E
[ultimate] (1). Dan Haywood (CODE SIGNING KEY) &lt;danhaywood@apache.org&gt;

gpg&gt;</programlisting>

        <para>Quit the gpg shell; you now have a subkey.</para>
      </sect1>

      <sect1>
        <title>Generate a Revocation Certificate</title>

        <para>It's good practice to generate a number of revocation
        certificates so that the key can be revoked if it happens to be
        compromised. See <ulink
        url="http://www.apache.org/dev/openpgp.html#revocation-certs">the gpg
        page</ulink> on the Apache wiki for more background on this
        topic.</para>

        <para>First, generate a "no reason specified" key:</para>

        <programlisting>$ gpg --output revoke-nnnnnnnn-0.asc --armor --gen-revoke nnnnnnnn

sec  4096R/nnnnnnnn yyyy-mm-dd Xxx Xxxxxxx (CODE SIGNING KEY) &lt;xx@apache.org&gt;
Create a revocation certificate for this key? (y/N) Y

Please select the reason for the revocation:
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
(Probably you want to select 1 here)
Your decision?</programlisting>

        <para>Select 0.</para>

        <programlisting>Your decision? 0

Enter an optional description; end it with an empty line:</programlisting>

        <para>Provide a description:</para>

        <programlisting>&gt; Generic certificate to revoke key, generated at time of key creation.
&gt;
Reason for revocation: No reason specified
Generic certificate to revoke key, generated at time of key creation.
Is this okay? (y/N)</programlisting>

        <para>Confirm this is ok.</para>

        <programlisting>Is this okay? y

You need a passphrase to unlock the secret key for
user: "Xxx Xxxxxxx (CODE SIGNING KEY) &lt;xxx@apache.org&gt;"
4096-bit RSA key, ID nnnnnnnn, created yyyy-mm-dd

Enter passphrase:</programlisting>

        <para>Enter a passphrase:</para>

        <programlisting>Enter passphrase:
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!</programlisting>

        <para>The file 'revoke-nnnnnnnn-0.asc' should be created: Then, backup
        this file.</para>

        <para>Now repeat the process to create two further revocation
        certificates:</para>

        <itemizedlist>
          <listitem>
            <para><code>gpg --output revoke-nnnnnnnn-1.asc --armor
            --gen-revoke nnnnnnnn</code></para>

            <para>Specify reason as "1 = Key has been compromised"</para>
          </listitem>

          <listitem>
            <para><code>gpg --output revoke-nnnnnnnn-3.asc --armor
            --gen-revoke nnnnnnnn</code></para>

            <para>Specify reason as "3 = Key is no longer used"</para>
          </listitem>
        </itemizedlist>

        <para>Backup these files also.</para>

        <para><note>
            <para>if you find that you need to revoke your certificate, this
            <ulink
            url="http://www.hackdiary.com/2004/01/18/revoking-a-gpg-key">blog
            post</ulink> explains how.</para>
          </note></para>
      </sect1>

      <sect1>
        <title>Publish Key</title>

        <para>It is also necessary to publish your key. There are several
        places where this should be done. In most cases, you'll need the
        "armored" " (ie ASCII) representation of your key. This can be
        generated using:</para>

        <programlisting>$ gpg --armor --export nnnnnnnn &gt; nnnnnnnn.asc</programlisting>

        <para>where nnnnnnnn is the id of your public key.</para>

        <para>You'll also need the fingerprint of your key. This can be
        generated using:</para>

        <programlisting>$ gpg --fingerprint nnnnnnnn</programlisting>

        <para>The output from this command includes a line beginning "Key
        fingerprint", followed by a (space delimited) 40 character hexadecimal
        fingerprint. The last 8 characters should be the same as the key id
        (nnnnnnnn).</para>

        <sect2>
          <title>Publish to a public key server</title>

          <para>To a publish your key to a public key server (eg the MIT key
          server hosted at <ulink
          url="http://pgp.mit.edu">http://pgp.mit.edu</ulink>), use the
          procedure below. Public key servers synchronize with each other, so
          publishing to one key server should be sufficient. For background
          reading on this, see the <ulink
          url="http://www.apache.org/dev/release-signing.html#keyserver-upload">release
          signing page</ulink> on the Apache wiki, and the <ulink
          url="http://maven.apache.org/developers/release/pmc-gpg-keys.html">gpg
          key page</ulink> on the Maven wiki.</para>

          <para>To send the key up to the key server:</para>

          <programlisting>$ gpg --send-keys --keyserver pgp.mit.edu nnnnnnnn</programlisting>

          <para>where nnnnnnnn is the key Id.</para>

          <para>Alternatively, you can browse to the <ulink
          url="http://pgp.mit.edu">MIT key server</ulink> and paste in the
          armored representation of your key.</para>

          <para>Confirm the key has been added by browsing to submitting the
          following URL:</para>

          <programlisting>http://pgp.mit.edu:11371/pks/lookup?search=0xnnnnnnnnn&amp;op=vindex</programlisting>

          <para>again, where nnnnnnnn is the key Id.</para>
        </sect2>

        <sect2>
          <title>Publish to your Apache home directory</title>

          <para>The armored representation of your public key should be
          uploaded to your home directory on people.apache.org, and renamed as
          <filename>.pgpkey</filename>. Make sure this is readable by
          all.</para>
        </sect2>

        <sect2>
          <title>Publish to your Apache HTML home directory</title>

          <para>The armored representation of your public key should be
          uploaded to your <filename>public_html</filename> home directory on
          people.apache.org, named nnnnnnnn.asc. Make sure this is readable by
          all.</para>

          <para>Check the file is accessible by browsing to:<programlisting>http://people.apache.org/~xxxxxxxx/nnnnnnnn.asc</programlisting></para>

          <para>where xxxxxxxx is your apache LDAP user name and nnnnnnnn is
          your public key id.</para>
        </sect2>

        <sect2>
          <title>FOAF</title>

          <para>First, check out the committers/info directory:</para>

          <programlisting>svn co https://svn.apache.org/repos/private/committers/info</programlisting>

          <para>Go to Apache FOAF-a-matic <ulink
          url="http://people.apache.org/foaf/foafamatic.html">web page</ulink>
          to generate the FOAF file text (we copy this text out in a
          minute):</para>

          <itemizedlist>
            <listitem>
              <para>enter ASF LDAP user name</para>
            </listitem>

            <listitem>
              <para>enter First name, Last name</para>
            </listitem>

            <listitem>
              <para>for PGP key fingerprints, add Key</para>

              <itemizedlist>
                <listitem>
                  <para>paste in the key id</para>
                </listitem>

                <listitem>
                  <para>paste in the fingerprint</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>press "Create"</para>
            </listitem>
          </itemizedlist>

          <para>In the box below, you should have a FOAF file, something
          like:</para>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;rdf:RDF
      xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
      xmlns:foaf="http://xmlns.com/foaf/0.1/"
      xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
      xmlns:pm="http://www.web-semantics.org/ns/pm#"
      xmlns:wot="http://xmlns.com/wot/0.1/"
      xmlns:rss="http://purl.org/rss/1.0/"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:ical="http://www.w3.org/2002/12/cal/ical#"
      xmlns:doap="http://usefulinc.com/ns/doap#"&gt;
  &lt;foaf:Person rdf:ID="danhaywood"&gt;
    &lt;foaf:name&gt;Xxx Xxxxxxxx&lt;/foaf:name&gt;
    &lt;foaf:givenname&gt;Xxx&lt;/foaf:givenname&gt;
    &lt;foaf:family_name&gt;Xxxxxxxx&lt;/foaf:family_name&gt;
    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;
  &lt;/foaf:Person&gt;
&lt;/rdf:RDF&gt;</programlisting>

          <para>(If you are creating the FOAF file for the first time, you may
          want to add additional details).</para>

          <para>From this, copy out the wot:key, and paste into your FDF file
          in committers/info:</para>

          <programlisting>    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;</programlisting>

          <para>Then, manually add in a &lt;wot:pubkeyAddress&gt; element
          within &lt;wot:PubKey&gt;:</para>

          <programlisting>    &lt;wot:hasKey&gt;
      &lt;wot:PubKey&gt;
        &lt;wot:fingerprint&gt;nnnn nnnn nnnn nnnn nnnn  nnnn nnnn nnnn nnnn nnnn&lt;/wot:fingerprint&gt;
        &lt;wot:hex_id&gt;nnnnnnnn&lt;/wot:hex_id&gt;
        &lt;wot:pubkeyAddress
          rdf:resource="http://people.apache.org/~username/nnnnnnnn.asc/&gt;
      &lt;/wot:PubKey&gt;
    &lt;/wot:hasKey&gt;</programlisting>

          <para>ie, referencing your publically exported public key</para>

          <para>Finally, commit your changes.</para>
        </sect2>

        <sect2>
          <title>Save to KEYS</title>

          <para>The armored representation of the public key should be saved
          to ExpressiveObjects' KEYS file, <ulink
          url="https://svn.apache.org/repo/asf/incubator/expressive-objects/KEYS">https://svn.apache.org/repo/asf/incubator/expressive-objects/KEYS</ulink>
          (ie, parent of <filename>trunk</filename>).</para>

          <para>First, in a new directory, checkout this file:</para>

          <programlisting>svn -N co https://svn.apache.org/repos/asf/incubator/expressive-objects/ .</programlisting>

          <para>This should bring down the <filename>KEYS</filename>
          file.</para>

          <para>Then, export your signature and armored representation.</para>

          <programlisting>gpg --list-sigs nnnnnnnn &gt;&gt;KEYS
gpg --armor --export nnnnnnnn &gt;&gt;KEYS</programlisting>

          <para>Then commit.</para>
        </sect2>

        <sect2>
          <title>id.apache.org</title>

          <para>Log onto id.apache.org and ensure that the finger print of
          your public key is correct.</para>
        </sect2>
      </sect1>

      <sect1>
        <title>Attend Key Signing Party (Apache web of trust)</title>

        <para>It is strongly advised that the contributor attend a key signing
        party at an Apache event, in order that other Apache
        committers/members can in person verify their identity against the
        key. The process for this is described <ulink
        url="http://www.apache.org/dev/release-signing.html#key-signing-party">here</ulink>
        and <ulink
        url="http://wiki.apache.org/apachecon/PgpKeySigning">here</ulink>.</para>
      </sect1>
    </appendix>

    <appendix>
      <title>Recreating the Quick Start Archetype</title>

      <abstract>
        <para>Procedure for recreating the quickstart archetype.</para>
      </abstract>

      <para>The quickstart archetype is created by "reverse-engineering" the
      quickstart prototype application that resides in
      <filename>trunk/examples/quickstart</filename>. This appendix describes
      the steps needed in order to do so.</para>

      <sect1 id="sec.TestingTheQuickstartApp">
        <title>Confirm that the quickstart example application works
        correctly</title>

        <para>The first step is to ensure that the quickstart example
        application works correctly. These steps can also be used to test a
        newly created app built by the archetype (to test that the archetype
        is ok, prior to commit).</para>

        <para>The quickstart example application defines a number of modules.
        These include:</para>

        <itemizedlist>
          <listitem>
            <para>the <filename>webapp</filename> module</para>

            <para>which defines a <acronym>WAR</acronym> artifact that bundles
            the <acronym>HTML</acronym> viewer and the (Restful)
            <acronym>JSON</acronym> viewer.</para>
          </listitem>

          <listitem>
            <para>the <filename>tests-bdd</filename> module</para>

            <para>which contains a set of <ulink
            url="http://concordion.org">Concordion</ulink> story tests that
            are executed through <emphasis>ExpressiveObjects</emphasis>' Concordion
            integration (ie the <acronym>BDD</acronym> viewer);</para>
          </listitem>

          <listitem>
            <para>The tests-junit module</para>

            <para>which contains a set of <ulink
            url="http://junit.org">JUnit</ulink> tests that exercise the
            domain object model using <emphasis>ExpressiveObjects</emphasis>' JUnit
            integration (ie the JUnit viewer)</para>
          </listitem>
        </itemizedlist>

        <para>Each of these modules defines artifacts that can be run in a
        variety of waysm and so each must be tested.</para>

        <sect2 id="sec.QuickstartTestingFromMaven">
          <title>Build (and Test) from Maven</title>

          <para>The following steps assume working in the directory that holds
          the parent module</para>

          <itemizedlist>
            <listitem>
              <para>If testing the quickstart prototype app, this is
              <filename>trunk/examples/quickstart</filename>.</para>
            </listitem>

            <listitem>
              <para>If testing the application generated from the archetype,
              then it will be the directory corresponding to the provided
              artifactId (eg "myapp").</para>
            </listitem>
          </itemizedlist>

          <sect3>
            <title>Build from the mvn command line</title>

            <para>First, check that that the application builds
            correctly:</para>

            <programlisting>$ mvn clean install</programlisting>

            <para>If the build succeeds, you should see something like:</para>

            <programlisting>...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] Quickstart App .................................... SUCCESS [0.583s]
[INFO] Quickstart DOM .................................... SUCCESS [2.322s]
[INFO] Quickstart Fixtures ............................... SUCCESS [1.814s]
[INFO] Quickstart Repositories (for ObjectStore Default) . SUCCESS [2.652s]
[INFO] Quickstart Repositories (for MongoDB) ............. SUCCESS [2.657s]
[INFO] Quickstart Repositories (for SQL) ................. SUCCESS [1.811s]
[INFO] Quickstart Webapp ................................. SUCCESS [9.018s]
[INFO] Quickstart JUnit Tests ............................ SUCCESS [5.223s]
[INFO] Quickstart BDD (Concordion) Tests ................. SUCCESS [6.107s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] ...</programlisting>

            <para>This command also runs tests, so a successful build means
            that the JUnit tests in the <filename>tests-junit</filename> and
            <filename>tests-bdd</filename> modules have passed. As a
            side-effect of running the tests, the Concordion
            <acronym>BDD</acronym> tests in <filename>tests-bdd</filename>
            will generate a set of annotated <acronym>HTML</acronym> files.
            These can be found in
            <filename>tests-bdd/target/concordion</filename> (as defined by
            the <varname>${concordion.output.dir}</varname> system property
            for the surefire plugin).</para>

            <para>For example, the
            <filename>tests-bdd/target/concordion/viewer/bdd/stories/todo/ScenarioMarkItemAsDone.html</filename>
            should look something like:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/release/bdd-concordion-output.png"
                           scale="55" />
              </imageobject>
            </mediaobject>
          </sect3>

          <sect3>
            <title>Run webapp JARs from mvn command line</title>

            <para>The <filename>webapp</filename> module actually creates two
            WAR artifacts:</para>

            <itemizedlist>
              <listitem>
                <para>The first is the regular WAR file generated by the Maven
                WAR plugin.</para>
              </listitem>

              <listitem>
                <para>The second is the same WAR as a self-contained
                executable, ie, that can be run from the command-line. This is
                built using the
                org.simplericity.jettyconsole:jetty-console-maven-plugin
                plugin.</para>

                <para>This is convenient both for demos or (so long as an
                in-memory object store is used) for distribution to business
                stakeholders.</para>
              </listitem>
            </itemizedlist>

            <para>The simplest way to check the jetty-console WAR is using the
            antrun goal:</para>

            <programlisting>mvn antrun:run</programlisting>

            <para>This should run a Swing application that displays the
            following banner:</para>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/jetty-console-banner.png"
                           scale="55" />
              </imageobject>
            </mediaobject>

            <para>Alternatively, you can run the jetty-console war manually
            using:</para>

            <programlisting>java -jar xxx-webapp-vvv-jetty-console.war</programlisting>

            <para>where xxx is the artifactId, and vvv is the version.</para>

            <para>Either way, start the application and sanity check that the
            viewers are functional.</para>
          </sect3>

          <sect3>
            <title>Testing webapp viewers using jetty:run</title>

            <para>The webapp WAR can also be tested from Maven using the
            <ulink
            url="http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin">Jetty
            plugin</ulink>:</para>

            <programlisting>$ cd webapp
$ mvn jetty:run</programlisting>

            <para>The jetty webserver will continue running until the maven
            command is cancelled (ctrl-C).</para>
          </sect3>

          <sect3>
            <title>Testing webapp viewers using external servlet
            container</title>

            <para>Optionally, you can also test the webapps by deploying to an
            external servlet container, for example the webapps directory of
            Tomcat 7. This is a very quick check that the application can be
            "deployed" to a production-like environment.</para>
          </sect3>
        </sect2>

        <sect2 id="sec.QuickstartTestingFromEclipse">
          <title>Testing from within Eclipse</title>

          <para><emphasis>Expressive Objects</emphasis> provides some additional help
          for developers who use Eclipse as their IDE. The quickstart app
          configuration that provides this help should also be tested.</para>

          <sect3>
            <title>Prerequisites</title>

            <para>To fully test with Eclipse, use Eclipse 3.7 with the m2e
            feature for Maven support. Note that using the m2eclipse with
            earlier versions of Eclipse may not suffice, because the
            <filename>.launch</filename> configuration files that are tested
            have a reference to
            <filename>org.eclipse.m2e.launchconfig.classpathProvider</filename>
            (whereas earlier versions the key was under
            <filename>org.maven.ide.eclipse</filename>).</para>

            <note>
              <para>As noted above, we do not test the webapps using Eclipse's
              WTP (web tooling) support, because there are interoperability
              problems between <acronym>WTP</acronym> and m2e. As and when
              this improves in the future, we'll update this guide.</para>
            </note>
          </sect3>

          <sect3>
            <title>Importing the Quickstart Project</title>

            <para>The quickstart app include Eclipse launch configurations (eg
            <filename>quickrun/ide/eclipse/launch/*.launch</filename>. These
            files have a hard-coded reference to the project file itself,
            which means that for them to work, the app that will be generated
            by the eventual quickstart archetype should be imported "in the
            right way".</para>

            <para>To minimize the chance of confusion by users who may not
            know every obscure feature of Eclipse, the quickstart prototype
            app is therefore written in such a way that the app should be
            imported using the defaults in the 'Import Maven projects'
            dialogue.</para>

            <note>
              <para>This is different from the way that we import the rest of
              the <emphasis>ExpressiveObjects</emphasis> framework, where we use
              Advanced&gt;Name Template=\[groupId]:\[artifactId].</para>
            </note>

            <para>Therefore, import the quickstart prototype app:</para>

            <itemizedlist>
              <listitem>
                <para>File&gt;Import&gt;Maven&gt;Existing Maven
                Projects</para>
              </listitem>

              <listitem>
                <para>Root
                Directory=<filename>trunk/examples/quickstart</filename></para>
              </listitem>

              <listitem>
                <para>Refresh</para>
              </listitem>

              <listitem>
                <para>Finish</para>
              </listitem>
            </itemizedlist>
          </sect3>

          <sect3 id="sec.QuickrunLaunchConfigurations">
            <title>Testing the webapp <filename>.launch</filename>
            configurations</title>

            <para>The webapp can be started using an Eclipse
            <filename>.launch</filename> configuration. This runs the
            <classname>uk.co.objectconnexions.expressiveobjects.WebServer</classname>, which basically
            just bootstraps the application defined in the
            <filename>web.xml</filename> file using an embedded Jetty.</para>

            <para>Navigate to the
            <filename>webapp/ide/eclipse/launch</filename> directory, and
            right-click Run As &gt; ... on the .launch file. Sanity check the
            application is running ok.</para>
          </sect3>

          <sect3>
            <title>Unit testing</title>

            <para>The tests-junit and the tests-bdd modules both contain JUnit
            test suites. These can be run from within Eclipse using
            <filename>Run As &gt; JUnit Test</filename>.</para>

            <table>
              <title>Testing the test modules</title>

              <tgroup cols="2">
                <colspec align="center" />

                <colspec align="left" />

                <thead>
                  <row>
                    <entry>Viewer</entry>

                    <entry align="center">Module</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>JUnit tests</entry>

                    <entry>tests-junit</entry>
                  </row>

                  <row>
                    <entry>BDD (Concordion) tests</entry>

                    <entry>tests-bdd</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para>When run from within Eclipse, the <acronym>BDD</acronym>
            tests will generate their test script in
            <filename>/tmp/concordion</filename> (the default
            location).</para>
          </sect3>
        </sect2>
      </sect1>

      <sect1 id="sec.GenerateArchetypeSource">
        <title>Generate the archetype source</title>

        <para>When you are happy that the quickstart prototype app is working
        correctly, it's time to generate the archetype.</para>

        <para>Firstly, export the quickstart prototype into a new
        directory:</para>

        <programlisting>$ mkdir /tmp/archetype
$ cd .../trunk/examples
$ svn export quickstart /tmp/archetype/quickstart</programlisting>

        <para>This will export all versioned files into
        <filename>/tmp/archetype/quickstart</filename>.</para>

        <para>At the same time, copy down the groovy script that will be
        needed in the next section (<xref
        linkend="sec.ArchetypeAutomatedEdits" />):</para>

        <programlisting>$ cd ../framework
$ cp updateGeneratedArchetypeSources.groovy /tmp/archetype/.</programlisting>

        <para>Now switch to this directory and regenerate the
        archetype:</para>

        <programlisting>$ cd /tmp/archetype/quickstart
$ mvn eclipse:clean clean archetype:create-from-project</programlisting>

        <para>This generates the archetype source in
        <filename>target/generated-sources/archetype</filename>.</para>
      </sect1>

      <sect1 id="sec.ArchetypeAutomatedEdits">
        <title>Perform automated edits to the generated archetype
        source</title>

        <para>Before the archetype source can be used to create the archetype,
        some of the generated files must be edited. Specifically:</para>

        <itemizedlist>
          <listitem>
            <para>each of the <filename>.launch</filename> files should be
            edited so that the <literal>PROJECT_ATTR</literal> key uses the
            <varname>${rootArtifactId}</varname> rather than hard-coded
            reference to the quickstart prototype; they also require Maven
            macro definitions at the top of each file.</para>
          </listitem>

          <listitem>
            <para>the
            <filename>META-INF/maven/archetype-metadata.xml</filename> file
            needs modifying so that:</para>

            <itemizedlist>
              <listitem>
                <para>filtering is applied to these
                <filename>.launch</filename> files.</para>
              </listitem>

              <listitem>
                <para>an Apache license is applied to this
                <acronym>XML</acronym> file</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <para>Since doing this manually would be rather laborious, this has
        been scripted using the
        <filename>updateGeneratedArchetypeSources.groovy</filename> script
        (copied down in the previous section, <xref
        linkend="sec.GenerateArchetypeSource" />). So, to make the change,
        just use:</para>

        <programlisting>$ cd ..
$ groovy updateGeneratedArchetypeSources.groovy
$ cd quickstart</programlisting>

        <para>If you want to check this has worked, switch into
        <filename>target/generated-sources/archetype/src/main/resources/archetype-resources</filename>
        and search for <filename>.launch</filename> files.</para>

        <note>
          <para>This script is NOT rerunnable (because it results in the
          <filename>.launch</filename> files not being valid XML)</para>
        </note>
      </sect1>

      <sect1>
        <title>Manually edit the generated archetype source</title>

        <para>The first edit is to the generated <filename>pom.xml</filename>
        file (in the <filename>target/generated-sources/archetype/</filename>
        directory); its <emphasis>groupId</emphasis> should be changed from
        <package>uk.co.objectconnexions.expressiveobjects.examples</package> to
        <package>uk.co.objectconnexions.expressiveobjects</package>.</para>

        <note>
          <para>This is because the example quickstart app has a groupId of
          <package>uk.co.objectconnexions.expressiveobjects.examples</package> rather than the desired
          <package>uk.co.objectconnexions.expressiveobjects</package>. Having the quickstart app use
          the desired groupId seems to trip up the archetype plugin's
          create-from-project goal, unfortunately.</para>
        </note>

        <note>
          <para>This edit could be automated, and hopefully will be one
          day.</para>
        </note>

        <para>In addition, the <filename>archetype-metadata.xml</filename>
        file (in
        <filename>target/generated-sources/archetype/src/main/resources/META-INF/maven</filename>)
        lists each of the files that constitute the archetype, using a
        wildcard syntax). Given that the archetype is generated by exporting
        out of the subversion/Eclipse workspace, all files should be relevant.
        Even so, it is probably worth reviewing to ensure that no files have
        been accidentally included:</para>

        <itemizedlist>
          <listitem>
            <para>there should be no <filename>.log</filename> files
            lists;</para>
          </listitem>

          <listitem>
            <para>there should be no <filename>.settings</filename>
            directories;</para>
          </listitem>

          <listitem>
            <para>there should be no <filename>.project</filename> or
            <filename>.classpath</filename> files</para>
          </listitem>
        </itemizedlist>

        <para>Update the file if necessary.</para>
      </sect1>

      <sect1>
        <title>Verify that the archetype works</title>

        <para>Use maven to build and install the archetype into your local
        repository:</para>

        <programlisting>$ cd /tmp/archetype/quickstart/<filename>target/generated-sources/archetype
$ mvn clean install</filename></programlisting>

        <para>Next, generate a new application from the archetype:</para>

        <programlisting>$ mkdir /tmp/test
$ cd /tmp/<filename>test
$ mvn archetype:generate  \
    -D archetypeCatalog=local \
    -D archetypeGroupId=uk.co.objectconnexions.expressiveobjects \
    -D archetypeArtifactId=quickstart-archetype \
    -D groupId=com.mycompany \
    -D artifactId=myapp</filename></programlisting>

        <para>This should result in a new application in the
        <filename>myapp</filename> directory. Switch into this
        directory:</para>

        <programlisting>$ cd myapp</programlisting>

        <para>Then, use the steps described above (<xref
        linkend="sec.TestingTheQuickstartApp" />) to test the generated
        application.</para>
      </sect1>

      <sect1>
        <title>Commit the archetype</title>

        <para>When you are happy that the archetype is good, it's time to
        delete the old archetype and commit the new.</para>

        <sect2>
          <title>Replace archetype in source tree</title>

          <para>First, delete the old archetype:</para>

          <programlisting>$ cd .../trunk/framework
$ svn delete quickstart-archetype
$ svn commit -m "deleting old archetype prior to recreating" quickstart-archetype
</programlisting>

          <para>Now, copy down to generated archetype</para>

          <programlisting>$ cp -R /tmp/archetype/quickstart/target/generated-sources/archetype quickstart-archetype</programlisting>
        </sect2>

        <sect2>
          <title>Further manually edits</title>

          <para>A number of further edits are required to the archetype to
          "fit it into" the build.</para>

          <sect3>
            <title>pom.xml</title>

            <para>Most of the manual edits required are to the
            <filename>pom.xml</filename> file. The first edit is to add in the
            <acronym>ASL</acronym> license:</para>

            <programlisting>&lt;!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
         http://www.apache.org/licenses/LICENSE-2.0
         
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
--&gt;</programlisting>

            <para>The archetype will ultimately be released and distributed
            along with the rest of ExpressiveObjects. Its <acronym>POM</acronym> should
            therefore reference the Expressive Objects parent:</para>

            <programlisting>&lt;parent&gt;
    &lt;groupId&gt;uk.co.objectconnexions.expressiveobjects&lt;/groupId&gt;
    &lt;artifactId&gt;expressive-objects&lt;/artifactId&gt;
    &lt;version&gt;0.x.x-incubating-SNAPSHOT&lt;/version&gt;
&lt;/parent&gt;</programlisting>

            <para>By default the name of the archetype is derived from the
            quickstart prototype application. Although not mandatory, we
            should edit it to make it a little more descriptive:</para>

            <programlisting>&lt;name&gt;Expressive Objects Quickstart Archetype&lt;/name&gt;</programlisting>
          </sect3>

          <sect3>
            <title>Remote resource plugin
            (<filename>src/main/appended-resources/supplemental-models.xml</filename>)</title>

            <para>An empty copy of
            <filename>src/main/appended-resources/supplemental-models.xml</filename>
            is also required:</para>

            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;supplementalDataModels 
  xmlns="http://maven.apache.org/supplemental-model/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/supplemental-model/1.0.0 
            http://maven.apache.org/xsd/supplemental-model-1.0.0.xsd"&gt;

&lt;/supplementalDataModels&gt;</programlisting>

            <para>This is as the result of the
            <filename>maven-remote-resource-plugin</filename> plugin inherited
            from the parent <acronym>POM</acronym>.</para>
          </sect3>
        </sect2>

        <sect2>
          <title>Commit the archetype</title>

          <para>Finally, commit the new archetype:</para>

          <programlisting>$ svn -N add quickstart-archetype
$ svn add quickstart-archetype/pom.xml
$ svn add quickstart-archetype/src
$ svn commit -m "recreated archetype from the 'quickstart' prototype app" quickstart-archetype</programlisting>
        </sect2>
      </sect1>
    </appendix>
  </part>
</book>
