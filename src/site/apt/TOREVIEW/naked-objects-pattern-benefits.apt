~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.


 
Benefits of the Naked Objects pattern

 Developing a business application using a framework such as Expressive Objects that
 uses the naked objects pattern offers four principal benefits:
 
 * <<A faster development cycle>>
 
 ... because there are fewer layers to develop.
 
 * <<Greater agility>>
 
   ... referring to the ease with which an application may be altered to 
   accommodate future changes in business requirements.
   
   In part this arises from the reduction in the number of developed layers that must be kept
   in synchronisation. Also the enforced 1:1 correspondence between the user presentation and the
   domain model, forces higher-quality domain object modelling, which in turn improves the agility.

 * <<A more empowering style of user interface>>.
 
   Object-oriented user interfaces 
   offer the user much greater flexibility than conventional task-oriented user interfaces, but
   traditionally they have been difficult to write. Expressive Objects creates
   an OOUI for you automatically.
        
 * <<Easier requirements analysis>>.
 
 With the naked objects pattern, the domain objects form a 
   common, "ubiquitous" language between users and developers. This common language facilitates the process of
   discussing requirements - because there are no other representations to discuss. Combined with the faster
   development cycle, it becomes possible to prototype functional applications in real time.
 
 []
 
 These benefits are clearly brought out in the {{{./naked-objects-case-study.html}case study}} on the use of a naked objects system in the
 Irish government. For a more formal analysis of the benefits, see Richard Pawson's {{{./Pawson-Naked-Objects-thesis.pdf}PhD thesis on Naked
 Objects}}.  
