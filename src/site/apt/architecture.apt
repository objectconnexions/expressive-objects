~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.

Expressive Objects Hexagonal Architecture

 <Expressive Objects> is built around the {{{http://alistair.cockburn.us/Hexagonal+architecture}hexagonal architecture}}:

%{snippet|verbatim=false|file=src/site/resources/images/HexagonalArchitectureOverview.png.map}

 []
  
 In the centre is the same domain model, which is hosted by the framework. 
 <viewer>s, either as a desktop app or as a webapp.  Equally, you can  
   choose which <object store> to use in order to persist your domain objects.


 As you might imagine, not needing to write any GUI code substantially speeds 
 up development, and shortens the feedback loop to allow you to improve your 
 core domain model without lots of GUI code slowing you down.
 
 The OOUIs generated by <Expressive Objects> are especially suitable to "expert" users, typically those internal to  
 your organization who have a good understanding of the domain and just want to get their job done.
 But for less expert users (or for a webapp deployed on the internet), a more scripted UI may be called for.  
 Expressive Objects therefore lets you customize the user interface according to your users' needs.

 Alternatively, you might want to just use Expressive Objects as a design tool.  The framework goes to a lot of trouble
 to ensure that the domain objects you build have no dependencies on the framework: they are basically annotated
 pojos that follow a number of straightforward programming conventions.  So, you can use Expressive Objects to rapidly 
 evolve your domain objects, and then deploy them within some other runtime framework if you wish. 

Where to Start?

  As you can see from this size of this site, there's quite a lot to 
  <Expressive Objects>.  To keep things manageable, we've tried to scope information 
  closest to where it's relevant.  To help guide you through the
  framework, we've also prepared a {{{./where-to-start.html}where to start}}.
  If you want to drill into detail, you can either follow the links in the menu
  on the left, and/or you can click on the modules on image above.  

Promoting Expressive Objects

  If you've spent some time playing with Expressive Objects and would like to promote it 
  within your organization (at a Brown Bag lunch, say) then we have some 
  presentation material for you to use.  The material includes speaker notes 
  and is available as a {{{./presentations/IntroducingApacheExpressiveObjects.pptx}PPTX}} 
  and {{{./presentations/IntroducingApacheExpressiveObjects.ppt}PPT}} (Microsoft), an  
  {{{./presentations/IntroducingApacheExpressiveObjects.odp}ODP}} (OpenDocument) and also 
  as a PDF ({{{./presentations/IntroducingApacheExpressiveObjects-slides.pdf}slides}} and  
  {{{./presentations/IntroducingApacheExpressiveObjects-notes.pdf}notes}}).  Feel free to 
  edit them to your needs.

Disclaimer
  
  <Expressive Objects is an effort undergoing incubation at The Apache Software Foundation (ASF), 
  sponsored by the Incubator project. Incubation is required of all newly accepted projects
  until a further review indicates that the infrastructure, communications, and decision 
  making process have stabilized in a manner consistent with other successful ASF projects. 
  While incubation status is not necessarily a reflection of the completeness or stability 
  of the code, it does indicate that the project has yet to be fully endorsed by the ASF.>

  
