~~  Licensed to the Apache Software Foundation (ASF) under one
~~  or more contributor license agreements.  See the NOTICE file
~~  distributed with this work for additional information
~~  regarding copyright ownership.  The ASF licenses this file
~~  to you under the Apache License, Version 2.0 (the
~~  "License"); you may not use this file except in compliance
~~  with the License.  You may obtain a copy of the License at
~~
~~        http://www.apache.org/licenses/LICENSE-2.0
~~
~~  Unless required by applicable law or agreed to in writing,
~~  software distributed under the License is distributed on an
~~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~  KIND, either express or implied.  See the License for the
~~  specific language governing permissions and limitations
~~  under the License.

Deploy <ExpressiveObjects> as a RESTful web service

  {{{http://en.wikipedia.org/wiki/Representational_state_transfer}REST}}
  (Representation State Transfer) is an architectural style for building
  highly scalable distributed systems, using the same principles as the
  World Wide Web.  Many commercial web APIs (twitter, facebook, Amazon)
  are implemented as either pure REST APIs or some approximation therein.
  
  The {{{http://restfulobjects.org}Restful Objects}} specification defines
  a means by a domain object model can be exposed as RESTful resources
  using JSON representations over HTTP.  {{{../viewer/restfulobjects/index.html}RestfulObjects for ExpressiveObjects}},
  an Expressive Objects viewer, is an implementation of that spec, making any Expressive Objects domain object automatically
  available via REST.
  
  There are two main use cases for deploying Expressive Objects as a RESTful web service are:
  
  * to allow a custom UI to be built against the RESTful API
  
    For example, using Javascript/JQuery, or an RIA technology such as Flex, JavaFX, Silverlight
    
  * to enable integration between systems
  
    REST is designed to be machine-readable, and so is an excellent choice for synchronous
    data interchange scenarios.   It can also be of use for system migrations (by wrapping
    old and new systems in REST, and using HTTP 301 redirects back to the client).
  
* {Expressive Objects persistence}

  The easiest way to deploy Expressive Objects as a RESTful web service is using ExpressiveObjects' own persistence
  mechanisms.  These are provided by the {{{../runtimes/dflt/index.html}default runtime}}, and
  offer in turn a number of {{{../runtimes/dflt/objectstores/index.html}object stores}}.
  
* {Custom persistence}

  Expressive Objects persistence API is pluggable, so if it does not provide the integration already then
  you could implementing to its object store API.
